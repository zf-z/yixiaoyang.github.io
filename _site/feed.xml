<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leon&#39;s Blog</title>
    <description>Embedded System, Linux, Python &amp; Ruby</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 12 Nov 2015 10:11:59 +0800</pubDate>
    <lastBuildDate>Thu, 12 Nov 2015 10:11:59 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>[工具] Linux上的常用‘冷门’工具</title>
        <description>&lt;h3 id=&quot;shell类&quot;&gt;Shell类&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;htop, atop &amp;amp; glances: 更好的top工具&lt;/li&gt;
&lt;li&gt;screen, dtach, tmux, byobu： Keep your terminal sessions alive. &lt;/li&gt;
&lt;li&gt;curl：大名鼎鼎curl&lt;/li&gt;
&lt;li&gt;ack, ag (silver searcher), pt：更好的代码查找工具，grep&lt;/li&gt;
&lt;li&gt;calcurse &amp;amp; remind + wyrd：比较实用，终端日历+todo&lt;/li&gt;
&lt;li&gt;qalc：The best calculator. Ever. (For scripts too.) &lt;/li&gt;
&lt;li&gt;终端：Tilda &amp;amp; Yakuake（F12的那个酸爽） &amp;amp; Terminator&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;类shell&quot;&gt;类Shell&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;vim：nonono，我在说exVim，&lt;a href=&quot;http://exvim.github.io/&quot;&gt;http://exvim.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;gentoo&quot;&gt;Gentoo&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;eix:比emerge简洁&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 11 Nov 2015 19:11:20 +0800</pubDate>
        <link>/2015/11/11/linux-shell-tools/</link>
        <guid isPermaLink="true">/2015/11/11/linux-shell-tools/</guid>
        
        <category>Shell</category>
        
        <category>工具</category>
        
        
        <category>工具</category>
        
      </item>
    
      <item>
        <title>2015年10月书单</title>
        <description>&lt;h3 id=&quot;machine-learning-in-action-机器学习实战&quot;&gt;Machine Learning in Action/机器学习实战&lt;/h3&gt;

&lt;p&gt;机器学习随着大数据搬上台面，本质上和机器、自动化之类的无关，是数据分析的范畴。&lt;/p&gt;

&lt;p&gt;作为一个非算法工程师，了解机器学习可以培养基本的“数据素养”。数据素养有一个过程：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;关心收据&lt;/li&gt;
&lt;li&gt;清洗数据&lt;/li&gt;
&lt;li&gt;分析数据和数据之间的联系&lt;/li&gt;
&lt;li&gt;数据到现实的转换&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;本书涵盖机器学习概念的相关分析模型、算法和工具，既然是in action，想必可操作性不错。还没看完，先挖坑。&lt;/p&gt;

&lt;h3 id=&quot;embedded-android&quot;&gt;Embedded Android&lt;/h3&gt;

&lt;p&gt;by Karim Yaghmour&lt;/p&gt;

&lt;p&gt;一本从方方面面介绍Android的书籍，面向嵌入式工程师，提供从底层驱动、中间层HAL、服务层和组件层到APP层的深度纵向解析，可以作为从Linux原生转Android开发的读必会入门书。&lt;/p&gt;
</description>
        <pubDate>Wed, 21 Oct 2015 20:10:05 +0800</pubDate>
        <link>/2015/10/21/books/</link>
        <guid isPermaLink="true">/2015/10/21/books/</guid>
        
        <category>books</category>
        
        
        <category>booklist</category>
        
      </item>
    
      <item>
        <title>2015年9月书单</title>
        <description>&lt;h3 id=&quot;ruby文档-web安全&quot;&gt;Ruby文档-Web安全&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://guides.rubyonrails.org/security.html&quot;&gt;http://guides.rubyonrails.org/security.html&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Sep 2015 20:10:05 +0800</pubDate>
        <link>/2015/09/28/books/</link>
        <guid isPermaLink="true">/2015/09/28/books/</guid>
        
        <category>books</category>
        
        
        <category>booklist</category>
        
      </item>
    
      <item>
        <title>[leetcode] Leetcode(5)-Manacher算法解决最大回文串问题</title>
        <description>&lt;p&gt;在leetcode上算法题目第5号题目会遇到最大回文串问题，暴力计算复杂度高达O(n^2)不可取，可使用经典的Manacher算法解决。&lt;/p&gt;

&lt;h3 id=&quot;问题&quot;&gt;问题&lt;/h3&gt;

&lt;p&gt;输入字符串S，求S包含的最长回文串&lt;/p&gt;

&lt;h3 id=&quot;预处理&quot;&gt;预处理&lt;/h3&gt;

&lt;p&gt;Manacher用一个巧妙的方式，将所有可能的奇数/偶数长度的回文子串都转换成了奇数长度：在每个字符的两边都插入一个特殊的符号。如 &lt;code&gt;xxyy&lt;/code&gt; =&amp;gt; &lt;code&gt;#x#x#y#y#&lt;/code&gt;,&lt;code&gt;yxy&lt;/code&gt; =&amp;gt; &lt;code&gt;#y#x#y#&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;记录数组&quot;&gt;记录数组&lt;/h3&gt;

&lt;p&gt;记录数组P[]用以记录以当前S[i]为中心的回文串向左/右方向上的最大扩展长度。比如S和P的对应关系：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;S # 1 # 2 # 2 # 1 # 2 # 3 # 2 # 1 #
P 0 1 0 1 4 1 0 3 0 1 0 5 0 1 0 1 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里有一个重要的特性：&lt;code&gt;P[i]正好是原字符串S中回文串的总长度&lt;/code&gt;，因此利用这个特性，计算完P[]就可以得知最大的回文串。&lt;/p&gt;

&lt;h3 id=&quot;记录数组计算过程的优化&quot;&gt;记录数组计算过程的优化&lt;/h3&gt;

&lt;p&gt;主要思想是：利用回文串的对称性，&lt;code&gt;计算中心点右边子回文串时可以利用左边对称位置已经计算出的值&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;先增加两个辅助变量id和mx，其中id表示最大回文子串中心的位置，mx则为id+P[id]，也就是最大回文子串的边界。j=2*id-i，即j是i关于id的对称点， 那么会出现一下两种情况：&lt;/p&gt;

&lt;p&gt;(1) 以j为中心的回文串没有超过mx的边界，此时P[i]=P[j]&lt;/p&gt;

&lt;p&gt;(2) 以j为中心的回文串超过mx的边界，此时[i,mx]范围内的串已经比较过了属于P[i]回文串的一部分，可以直接从max开始接着计算P[i]超出mx的那部分回文串。
经过上面两步处理，用id、mx配合，可以在每次循环中直接对P[i]的快速赋值，从而在计算以i为中心的回文子串的过程中，不必每次都从1开始比较，减少了比较次数，最终使得求解最长回文子串的长度达到线性O(N)的时间复杂度。&lt;/p&gt;

&lt;h3 id=&quot;实现&quot;&gt;实现&lt;/h3&gt;

&lt;p&gt;我的提交代码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LongestPalindromeSolution&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;longestPalindrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scopeL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scopeR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmpL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmpR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmpRMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;centerMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxPos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;maxPos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;scopeL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;scopeR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// pidx&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scopeL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scopeR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scopeL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scopeR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;scopeL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;scopeR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;centerMax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;maxPos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// pidx+?&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmpR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmpR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scopeR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;tmpL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmpR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;tmpRMax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmpL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmpR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmpRMax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;centerMax&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmpR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmpL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;tmpR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmpR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;centerMax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmpR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmpR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// reset pIdx&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmpR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;printVector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxPos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxPos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;:&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;:&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;src:#-&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printVector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;res:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1232454232414211&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;12784487sad22s2f&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;b2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;LongestPalindromeSolution&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;longestPalindrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;longestPalindrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//cout &amp;lt;&amp;lt; solu.convert(src,dst) &amp;lt;&amp;lt; &amp;quot;: &amp;quot; &amp;lt;&amp;lt; dst;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最终测试运行耗时8ms，运行效率超过了72%的答案哈哈。&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Sep 2015 00:40:05 +0800</pubDate>
        <link>/2015/09/16/Leetcode-Longest-Palindromic-Substring/</link>
        <guid isPermaLink="true">/2015/09/16/Leetcode-Longest-Palindromic-Substring/</guid>
        
        <category>leetcode</category>
        
        <category>算法</category>
        
        <category>cpp</category>
        
        
        <category>leetcode</category>
        
        <category>算法</category>
        
      </item>
    
      <item>
        <title>[Rails] Ruby &amp; Rails常用技巧集锦</title>
        <description>&lt;h3 id=&quot;rails使用环境变量&quot;&gt;Rails使用环境变量&lt;/h3&gt;

&lt;p&gt;Many applications require configuration of settings such as email account credentials or API keys for external services. You can pass local configuration settings to an application using environment variables.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Gmail Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Consider an application that uses Gmail to send email messages. Access to Gmail requires a username and password for access to your Gmail account. In your Rails application, you will need to configure these credentials in the file config/environments/production.rb. A portion of the file might look like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;config.action_mailer.smtp_settings = {
  address: &amp;quot;smtp.gmail.com&amp;quot;,
  port: 587,
  domain: &amp;quot;example.com&amp;quot;,
  authentication: &amp;quot;plain&amp;quot;,
  enable_starttls_auto: true,
  user_name: ENV[&amp;quot;GMAIL_USERNAME&amp;quot;],
  password: ENV[&amp;quot;GMAIL_PASSWORD&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You could “hardcode” your Gmail username and password into the file but that would expose it to everyone who has access to your git repository. Instead use the Ruby variable &lt;code&gt;ENV[&amp;quot;GMAIL_USERNAME&amp;quot;]&lt;/code&gt; to obtain an environment variable. The variable can be used anywhere in a Rails application. Ruby will replace ENV[&amp;quot;GMAIL_USERNAME&amp;quot;] with an environment variable.&lt;/p&gt;

&lt;p&gt;Let’s consider how to set local environment variables.&lt;/p&gt;

&lt;h3 id=&quot;ruby提取切片&quot;&gt;Ruby提取切片&lt;/h3&gt;

&lt;p&gt;You can get the result you want using collect! or map! to modify the array in-place:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# 1. collect&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w(hello there world)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hi&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 2. map&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w(hello there world)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;hi&amp;quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# change &amp;quot;hello&amp;quot; to &amp;quot;hi&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# output: [hi there world]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At each iteration, the element is replaced into the array by the value returned by the block.&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Aug 2015 18:35:20 +0800</pubDate>
        <link>/2015/08/27/Rails-Tips/</link>
        <guid isPermaLink="true">/2015/08/27/Rails-Tips/</guid>
        
        <category>Shell</category>
        
        <category>Ruby</category>
        
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>[CPP] Boost库概要</title>
        <description>&lt;p&gt;Boost和STL库是C++的血肉，C++的语言特性本身则是筋骨。现在在用的Qt库本身大而全，用起来方便，最重要的是跨平台，嵌入式用户交互方面的不二选择。&lt;/p&gt;

&lt;p&gt;目前使用Boost库的需求不是很充分，因为Qt在大部分应用上都可以胜任。不过Boost以效率和稳定颇有声誉，作为C++标准化新特性的重要参考，可略作了解。&lt;/p&gt;

&lt;h3 id=&quot;文本处理&quot;&gt;文本处理&lt;/h3&gt;

&lt;h4 id=&quot;boost-regex&quot;&gt;Boost.Regex&lt;/h4&gt;

&lt;p&gt;解决大量匹配问题的正则表达式库。不必羡慕perl、awk和sed。&lt;/p&gt;

&lt;h4 id=&quot;boost-spirit-amp-boost-tokenizer&quot;&gt;Boost.Spirit &amp;amp; Boost.Tokenizer&lt;/h4&gt;

&lt;p&gt;Spirit是一个语法生成框架，可以使用其构建命令分析器以及简单的语言处理器。想想Bison和flex就明白了。&lt;/p&gt;

&lt;h4 id=&quot;boost-string_algo&quot;&gt;Boost.String_algo&lt;/h4&gt;

&lt;p&gt;可以视为String类的扩展算法工具集。提供大小写转换、空格清除、分割、查找替换等扩展算法工具。&lt;/p&gt;

&lt;h3 id=&quot;容器和算法&quot;&gt;容器和算法&lt;/h3&gt;

&lt;p&gt;一些比较经典常用的数据结构和算法的实现。&lt;/p&gt;

&lt;h4 id=&quot;boost-array&quot;&gt;Boost.Array&lt;/h4&gt;

&lt;p&gt;有了Vector这玩意儿然并卵。除了基本的数组功能，提供类型安全而不牺牲性能，=_=，窃以为C++很多安全性的封装如智能指针，让用它的愚蠢程序员更加愚蠢，让用它的聪明程序员变得愚蠢。&lt;/p&gt;

&lt;h4 id=&quot;boost-multiarray&quot;&gt;Boost.MultiArray&lt;/h4&gt;

&lt;p&gt;多维容器。做矩阵计算的一定会喜欢。Vector二维以上数组声明都觉得麻烦。&lt;/p&gt;

&lt;h4 id=&quot;boost-graph&quot;&gt;Boost.Graph&lt;/h4&gt;

&lt;p&gt;泛型图算法工具集，包含邻接链表、邻接矩阵和边列表。提供Dijsktra最短路径算法，K最小生成树算法、拓扑逻辑排序等经典算法。&lt;/p&gt;

&lt;h4 id=&quot;boost-multi-index&quot;&gt;Boost.Multi-index&lt;/h4&gt;

&lt;p&gt;为底层容器提供多个索引，一个底层的容器可以有不同的排序方法和不同的访问语义。当std::set 和 std::map 不够用时,就可以用Boost.Multi-index,通常是在需要为查找元素而维护多个索引时。
不太了解，做稍微复杂的数据索引时应该会用到。&lt;/p&gt;

&lt;h4 id=&quot;boost-range&quot;&gt;Boost.Range&lt;/h4&gt;

&lt;p&gt;用过Python/Ruby的Rang后秒懂。&lt;/p&gt;

&lt;h4 id=&quot;boost-tunple&quot;&gt;Boost.Tunple&lt;/h4&gt;

&lt;p&gt;STL的pair不支持n-tunples，一般用自定义struct或者class实现，这个类模板支持直接声明和使用,如函数返回类型或参数,并提供一个泛型的方法来访问tuple的元素。&lt;/p&gt;

&lt;h4 id=&quot;boost-variant&quot;&gt;Boost.Variant&lt;/h4&gt;

&lt;p&gt;泛型类型的操作和转换。Qt中有类似的Qvariant。&lt;/p&gt;

&lt;h3 id=&quot;函数对象&quot;&gt;函数对象&lt;/h3&gt;

&lt;h4 id=&quot;boost-bind&quot;&gt;Boost.bind&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;bind简介&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个是重头戏，bind、函数对象、signal/slot等特性经常会用。
我觉得bind最重要的作用是：&lt;code&gt;改变参数的顺序&lt;/code&gt;，这使得我们可以少创建一些类似功能参数不同或者参数冗余的函数对象，减少代码量，使行为局部化。虽然标准库已经提供了一些可用的工具,如 bind1st 和 bind2nd, 但是这不够用，bind由此产生。&lt;/p&gt;

&lt;p&gt;Bind是对标准库的绑定器 bind1st和bind2nd的泛化,返回值是一个函数对象。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;bind范例&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#include &amp;quot;boost/bind.hpp&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;break_it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_broken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; is &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;working nominally&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;terribly broken&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bind_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statuses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;statuses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;status 1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;statuses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;status 2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;statuses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;status 3&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;statuses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;status 4&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;statuses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;break_it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;statuses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;break_it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#if 0&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;    // 这个循环正确地完成了任务,但它是冗长、低效的(由于要多次调用statuses.end()),并且不象使用标准库算&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;    // 法for_each那样清楚地表明意图。为了用for_each 来替换这个循环,我们需要用一个适配器来对vector元素&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;    // 调用成员函数report。这时,由于元素是以值的方式保存的,我们需要的是适配器mem_fun_ref&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;    for (std::vector&amp;lt;status&amp;gt;::iterator it=statuses.begin();&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;        it!=statuses.end();++it) {&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;        it-&amp;gt;report();&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;    }&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#else&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// for_each(str.begin(), str.end(), (mem_fun(&amp;amp;funtest::doSth),this));&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 把str中的每个元素作为参数送到第三个参数（是个函数的指针）所指向的函数。&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;for_each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statuses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statuses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bind_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面&lt;code&gt;std::for_each( statuses.begin(),statuses.end(),boost::bind(&amp;amp;status::report,_1));&lt;/code&gt;中的那一个占位符让人很迷惑。
实际上，类成员函数的绑定不同于匿名函数的绑定，成员函数必须有一个父对象或者指针，才能经过this进行调用，而匿名函数可以直接进行()操作,
因此bind需要“牺牲”一位占位符要求用户提供类的实例、指针或者引用，用过对象作为第一个参数来调用成员函数。
即&lt;code&gt;bind(&amp;amp;x::func,x,_1,_2...)&lt;/code&gt;最多只能绑定8位参数。&lt;/p&gt;

&lt;p&gt;假设我们有一个类&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下三种绑定都是成立的&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ClassA obj, &amp;amp;obj_ref=obj;
ClassA *obj_ptr = &amp;amp;obj

cout &amp;lt;&amp;lt; bind(&amp;amp;obj::f, obj, _1, 20)(10) &amp;lt;&amp;lt; endl;
cout &amp;lt;&amp;lt; bind(&amp;amp;obj::f, obj_ref, _1, _2)(10,20) &amp;lt;&amp;lt; endl;
cout &amp;lt;&amp;lt; bind(&amp;amp;obj::f, obj_ptr, _1, _2)(10,20) &amp;lt;&amp;lt; endl;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;bind的内部实现&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;bind的实现主要依靠：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;对()运算符的重载&lt;/li&gt;
&lt;li&gt;空间内置占位符变量&lt;/li&gt;
&lt;li&gt;函数对象的调用&lt;/li&gt;
&lt;li&gt;泛型支持&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;看了实现解析并没有说的那么&lt;code&gt;黑魔法&lt;/code&gt;。要说黑魔法，lamba才算是。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;其他&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;boost::bind() 返回的函数对象会保存要绑定的实参. 而且总是拷贝一份以值的方式保存..&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;boost-signals2&quot;&gt;Boost.signals2&lt;/h4&gt;

&lt;p&gt;signals2基于signals实现的一个线程安全信号/插槽模型。主要功能类似Qt的信号/插槽模型，对于事件处理系统相当有用。&lt;/p&gt;

&lt;h3 id=&quot;并发处理&quot;&gt;并发处理&lt;/h3&gt;

&lt;h4 id=&quot;thread&quot;&gt;thread&lt;/h4&gt;

&lt;p&gt;支持最广泛的windows和posix线程，所以跨平台能力比较好，包含创建销毁等待、线程（组）管理、同步等基本功能，多线程封装的库虽然能够简化编程过程，但是写好并发程序其实是另外一回事。就像一个拿好刀的厨师不一定能做出一手好菜一样。&lt;/p&gt;

&lt;h4 id=&quot;asio&quot;&gt;asio&lt;/h4&gt;

&lt;p&gt;asio主要关注网络通信。使用大量的类封装了socket api，提供了一些cpp接口的网络编程接口，支持tcp/icmp/udp等常用协议。总而言之，使用asio可以大量简化、可靠的socket同步/异步编程类，比用C从最小服务器/客户端程序写起要好很多，我们不需要一遍遍造毫无创意的轮子。&lt;/p&gt;

&lt;h3 id=&quot;其他&quot;&gt;其他&lt;/h3&gt;

&lt;p&gt;有个支持python的扩展库--写过python的人应该直到python可以用cpp扩展，两者的区别就一个是在cpp程序里调用python程序，一个是使用cpp实现/重写自定义python组件并调用。&lt;/p&gt;

&lt;h3 id=&quot;关于boost和cpp&quot;&gt;关于boost和Cpp&lt;/h3&gt;

&lt;p&gt;Boost库给总是给我一种古怪的感觉。cpp是一门糟糕的设计语言，但是在很多系统层应用场合，无法使用更加高级的解释性语言的情况下，cpp比c更有生产力而不输效率。&lt;/p&gt;

&lt;p&gt;参考书籍:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Boost documents&lt;/li&gt;
&lt;li&gt;Boost程序库完全开发指南&lt;/li&gt;
&lt;li&gt;Beyond the C++ Standard Library&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 03 Aug 2015 03:30:25 +0800</pubDate>
        <link>/2015/08/03/boost-learning/</link>
        <guid isPermaLink="true">/2015/08/03/boost-learning/</guid>
        
        <category>c++</category>
        
        <category>boost</category>
        
        
        <category>cpp</category>
        
      </item>
    
      <item>
        <title>[Python] 小型爬虫uSpider实现</title>
        <description>&lt;p&gt;最近用python实现了一个小型爬虫，爬个博客没问题。
github地址： &lt;a href=&quot;https://github.com/yixiaoyang/pyScripts/tree/master/uSpider&quot;&gt;https://github.com/yixiaoyang/pyScripts/tree/master/uSpider&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;爬虫主要由三部分构成：&lt;/p&gt;

&lt;h3 id=&quot;分析器（parser）&quot;&gt;分析器（parser）&lt;/h3&gt;

&lt;p&gt;作为url生产者角色和doc的消费者角色，通过正则表达式解析下载文件中的链接产生url。由于解析速度较快，建议单线程。&lt;/p&gt;

&lt;h3 id=&quot;下载器（downloader）&quot;&gt;下载器（downloader）&lt;/h3&gt;

&lt;p&gt;作为url消费者角色和doc的生产者角色。从网络下载文件时间不可预知，速度较慢，建议使用多进程&lt;/p&gt;

&lt;h3 id=&quot;控制台（console）&quot;&gt;控制台（console）&lt;/h3&gt;

&lt;p&gt;报告当前的抓取情况，并维护url资源和doc资源。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;url资源&lt;/p&gt;

&lt;p&gt;url资源由parser解析已经下载的文件内容后提取站点链接产生。如果url对应的文件已经存在，则表示此url已经下载过了，不再将其加入urls集合。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;document资源&lt;/p&gt;

&lt;p&gt;downloader获取一条url后开始下载资源，下载完毕即在本地生成对应文件，每个站点文件为一个doc资源，parser将对每个未解析的doc文件资源进行链接提取。资源的同步使用两把资源锁。每个线程获取一条资源后需要将woker引用计数＋1表示仍有线程在对资源进行工作，当线程使用完资源后worker引用计数-1。当所有资源为空且资源计数为0（没有工作线程在引用资源）时，说明整个站点的解析和下载工作完成，此时线程可以此检测done状态退出，主进程随后join退出。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;其他&quot;&gt;其他&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;资源缓冲大小&lt;/p&gt;

&lt;p&gt;暂未设置资源缓冲大小，必要时需要加以限制防止在抓取大型站点时内存耗尽运行速率下降。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;相关站点抓取&lt;/p&gt;

&lt;p&gt;现有的程序仅广度优先遍历抓取一个站点内容，对其他站点的资源并没有抓取。后期对其他站点需要抓取一个深度的资源（直接引用资源）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;robots协议&lt;/p&gt;

&lt;p&gt;暂未考虑robots协议相关内容，是一只并不十分友好的spider。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;大名鼎鼎scrapy&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;大型网站爬取过程中的问题&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;去重问题，如果内存上的set不够用？&lt;/li&gt;
&lt;li&gt;集群化，如何进行分布式爬取&lt;/li&gt;
&lt;li&gt;爬取深度和权重，如何对资源的过滤&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 29 Jul 2015 01:16:00 +0800</pubDate>
        <link>/2015/07/29/python-spider/</link>
        <guid isPermaLink="true">/2015/07/29/python-spider/</guid>
        
        <category>python</category>
        
        <category>爬虫</category>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>[搬运] SED单行脚本快速参考</title>
        <description>&lt;p&gt;英文标题：&lt;code&gt;USEFUL ONE-LINE SCRIPTS FOR SED (Unix stream editor)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;原标题：&lt;code&gt;HANDY ONE-LINERS FOR SED (Unix stream editor)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;整理：Eric Pement  - 电邮：&lt;code&gt;pemente[at]northpark.edu&lt;/code&gt;         版本5.5&lt;/p&gt;

&lt;p&gt;译者：Joe Hong     - 电邮：&lt;code&gt;hq00e@126.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在以下地址可找到本文档的最新（英文）版本：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://sed.sourceforge.net/sed1line.txt&quot;&gt;http://sed.sourceforge.net/sed1line.txt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.pement.org/sed/sed1line.txt&quot;&gt;http://www.pement.org/sed/sed1line.txt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其他语言版本：&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Lang&lt;/th&gt;
&lt;th&gt;link&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;中文&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://sed.sourceforge.net/sed1line_zh-CN.html&quot;&gt;http://sed.sourceforge.net/sed1line_zh-CN.html&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;捷克语&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://sed.sourceforge.net/sed1line_cz.html&quot;&gt;http://sed.sourceforge.net/sed1line_cz.html&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;荷语&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://sed.sourceforge.net/sed1line_nl.html&quot;&gt;http://sed.sourceforge.net/sed1line_nl.html&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;法语&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://sed.sourceforge.net/sed1line_fr.html&quot;&gt;http://sed.sourceforge.net/sed1line_fr.html&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;德语&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://sed.sourceforge.net/sed1line_de.html&quot;&gt;http://sed.sourceforge.net/sed1line_de.html&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;葡语&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://sed.sourceforge.net/sed1line_pt-BR.html&quot;&gt;http://sed.sourceforge.net/sed1line_pt-BR.html&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3 id=&quot;文本间隔&quot;&gt;文本间隔&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; &lt;span class=&quot;c&quot;&gt;# 在每一行后面增加一空行&lt;/span&gt;
 sed G

 &lt;span class=&quot;c&quot;&gt;# 将原来的所有空行删除并在每一行后面增加一空行。&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# 这样在输出的文本中每一行后面将有且只有一空行。&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/^$/d;G&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 在每一行后面增加两行空行&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;G;G&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 将第一个脚本所产生的所有空行删除（即删除所有偶数行）&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;n;d&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 在匹配式样“regex”的行之前插入一空行&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/regex/{x;p;x;}&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 在匹配式样“regex”的行之后插入一空行&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/regex/G&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 在匹配式样“regex”的行之前和之后各插入一空行&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/regex/{x;p;x;G;}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;编号&quot;&gt;编号&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; &lt;span class=&quot;c&quot;&gt;# 为文件中的每一行进行编号（简单的左对齐方式）。这里使用了“制表符”&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# （tab，见本文末尾关于&amp;#39;\t&amp;#39;的用法的描述）而不是空格来对齐边缘。&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; filename &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;N;s/\n/\t/&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 对文件中的所有行编号（行号在左，文字右端对齐）。&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; filename &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;N; s/^/     /; s/ *\(.\{6,\}\)\n/\1  /&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 对文件中的所有行编号，但只显示非空白行的行号。&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/./=&amp;#39;&lt;/span&gt; filename &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/./N; s/\n/ /&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 计算行数 （模拟 &amp;quot;wc -l&amp;quot;）&lt;/span&gt;
 sed -n &lt;span class=&quot;s1&quot;&gt;&amp;#39;$=&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;文本转换和替代&quot;&gt;文本转换和替代&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; &lt;span class=&quot;c&quot;&gt;# Unix环境：转换DOS的新行符（CR/LF）为Unix格式。&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/.$//&amp;#39;&lt;/span&gt;                     &lt;span class=&quot;c&quot;&gt;# 假设所有行以CR/LF结束&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/^M$//&amp;#39;&lt;/span&gt;                    &lt;span class=&quot;c&quot;&gt;# 在bash/tcsh中，将按Ctrl-M改为按Ctrl-V&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/\x0D$//&amp;#39;&lt;/span&gt;                  &lt;span class=&quot;c&quot;&gt;# ssed、gsed 3.02.80，及更高版本&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# Unix环境：转换Unix的新行符（LF）为DOS格式。&lt;/span&gt;
 sed &lt;span class=&quot;s2&quot;&gt;&amp;quot;s/$/`echo -e \\\r`/&amp;quot;&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;# 在ksh下所使用的命令&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/$&amp;#39;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/`echo \\\r`/&amp;quot;&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;# 在bash下所使用的命令&lt;/span&gt;
 sed &lt;span class=&quot;s2&quot;&gt;&amp;quot;s/$/`echo \\\r`/&amp;quot;&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;# 在zsh下所使用的命令&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/$/\r/&amp;#39;&lt;/span&gt;                    &lt;span class=&quot;c&quot;&gt;# gsed 3.02.80 及更高版本&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# DOS环境：转换Unix新行符（LF）为DOS格式。&lt;/span&gt;
 sed &lt;span class=&quot;s2&quot;&gt;&amp;quot;s/$//&amp;quot;&lt;/span&gt;                      &lt;span class=&quot;c&quot;&gt;# 方法 1&lt;/span&gt;
 sed -n p                         &lt;span class=&quot;c&quot;&gt;# 方法 2&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# DOS环境：转换DOS新行符（CR/LF）为Unix格式。&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# 下面的脚本只对UnxUtils sed 4.0.7 及更高版本有效。要识别UnxUtils版本的&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;#  sed可以通过其特有的“--text”选项。你可以使用帮助选项（“--help”）看&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# 其中有无一个“--text”项以此来判断所使用的是否是UnxUtils版本。其它DOS&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# 版本的的sed则无法进行这一转换。但可以用“tr”来实现这一转换。&lt;/span&gt;
 sed &lt;span class=&quot;s2&quot;&gt;&amp;quot;s/\r//&amp;quot;&lt;/span&gt; infile &amp;gt;outfile     &lt;span class=&quot;c&quot;&gt;# UnxUtils sed v4.0.7 或更高版本&lt;/span&gt;
 tr -d &lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt; &amp;lt;infile &amp;gt;outfile        &lt;span class=&quot;c&quot;&gt;# GNU tr 1.22 或更高版本&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 将每一行前导的“空白字符”（空格，制表符）删除&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# 使之左对齐&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/^[ \t]*//&amp;#39;&lt;/span&gt;                &lt;span class=&quot;c&quot;&gt;# 见本文末尾关于&amp;#39;\t&amp;#39;用法的描述&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 将每一行拖尾的“空白字符”（空格，制表符）删除&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/[ \t]*$//&amp;#39;&lt;/span&gt;                &lt;span class=&quot;c&quot;&gt;# 见本文末尾关于&amp;#39;\t&amp;#39;用法的描述&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 将每一行中的前导和拖尾的空白字符删除&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/^[ \t]*//;s/[ \t]*$//&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 在每一行开头处插入5个空格（使全文向右移动5个字符的位置）&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/^/     /&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 以79个字符为宽度，将所有文本右对齐&lt;/span&gt;
 sed -e :a -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/^.\{1,78\}$/ &amp;amp;/;ta&amp;#39;&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 78个字符外加最后的一个空格&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 以79个字符为宽度，使所有文本居中。在方法1中，为了让文本居中每一行的前&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# 头和后头都填充了空格。 在方法2中，在居中文本的过程中只在文本的前面填充&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# 空格，并且最终这些空格将有一半会被删除。此外每一行的后头并未填充空格。&lt;/span&gt;
 sed  -e :a -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/^.\{1,77\}$/ &amp;amp; /;ta&amp;#39;&lt;/span&gt;                     &lt;span class=&quot;c&quot;&gt;# 方法1&lt;/span&gt;
 sed  -e :a -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/^.\{1,77\}$/ &amp;amp;/;ta&amp;#39;&lt;/span&gt; -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/\( *\)\1/\1/&amp;#39;&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 方法2&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 在每一行中查找字串“foo”，并将找到的“foo”替换为“bar”&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/foo/bar/&amp;#39;&lt;/span&gt;                 &lt;span class=&quot;c&quot;&gt;# 只替换每一行中的第一个“foo”字串&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/foo/bar/4&amp;#39;&lt;/span&gt;                &lt;span class=&quot;c&quot;&gt;# 只替换每一行中的第四个“foo”字串&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/foo/bar/g&amp;#39;&lt;/span&gt;                &lt;span class=&quot;c&quot;&gt;# 将每一行中的所有“foo”都换成“bar”&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/\(.*\)foo\(.*foo\)/\1bar\2/&amp;#39;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 替换倒数第二个“foo”&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/\(.*\)foo/\1bar/&amp;#39;&lt;/span&gt;            &lt;span class=&quot;c&quot;&gt;# 替换最后一个“foo”&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 只在行中出现字串“baz”的情况下将“foo”替换成“bar”&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/baz/s/foo/bar/g&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 将“foo”替换成“bar”，并且只在行中未出现字串“baz”的情况下替换&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/baz/!s/foo/bar/g&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 不管是“scarlet”“ruby”还是“puce”，一律换成“red”&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/scarlet/red/g;s/ruby/red/g;s/puce/red/g&amp;#39;&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;#对多数的sed都有效&lt;/span&gt;
 gsed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/scarlet\|ruby\|puce/red/g&amp;#39;&lt;/span&gt;               &lt;span class=&quot;c&quot;&gt;# 只对GNU sed有效&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 倒置所有行，第一行成为最后一行，依次类推（模拟“tac”）。&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# 由于某些原因，使用下面命令时HHsed v1.5会将文件中的空行删除&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;1!G;h;$!d&amp;#39;&lt;/span&gt;               &lt;span class=&quot;c&quot;&gt;# 方法1&lt;/span&gt;
 sed -n &lt;span class=&quot;s1&quot;&gt;&amp;#39;1!G;h;$p&amp;#39;&lt;/span&gt;             &lt;span class=&quot;c&quot;&gt;# 方法2&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 将行中的字符逆序排列，第一个字成为最后一字，……（模拟“rev”）&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/\n/!G;s/\(.\)\(.*\n\)/&amp;amp;\2\1/;//D;s/.//&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 将每两行连接成一行（类似“paste”）&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;$!N;s/\n/ /&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 如果当前行以反斜杠“\”结束，则将下一行并到当前行末尾&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# 并去掉原来行尾的反斜杠&lt;/span&gt;
 sed -e :a -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;/\\$/N; s/\\\n//; ta&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 如果当前行以等号开头，将当前行并到上一行末尾&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# 并以单个空格代替原来行头的“=”&lt;/span&gt;
 sed -e :a -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;$!N;s/\n=/ /;ta&amp;#39;&lt;/span&gt; -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;P;D&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 为数字字串增加逗号分隔符号，将“1234567”改为“1,234,567”&lt;/span&gt;
 gsed &lt;span class=&quot;s1&quot;&gt;&amp;#39;:a;s/\B[0-9]\{3\}\&amp;gt;/,&amp;amp;/;ta&amp;#39;&lt;/span&gt;                     &lt;span class=&quot;c&quot;&gt;# GNU sed&lt;/span&gt;
 sed -e :a -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/\(.*[0-9]\)\([0-9]\{3\}\)/\1,\2/;ta&amp;#39;&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 其他sed&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 为带有小数点和负号的数值增加逗号分隔符（GNU sed）&lt;/span&gt;
 gsed -r &lt;span class=&quot;s1&quot;&gt;&amp;#39;:a;s/(^|[^0-9.])([0-9]+)([0-9]{3})/\1\2,\3/g;ta&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 在每5行后增加一空白行 （在第5，10，15，20，等行后增加一空白行）&lt;/span&gt;
 gsed &lt;span class=&quot;s1&quot;&gt;&amp;#39;0~5G&amp;#39;&lt;/span&gt;                      &lt;span class=&quot;c&quot;&gt;# 只对GNU sed有效&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;n;n;n;n;G;&amp;#39;&lt;/span&gt;                 &lt;span class=&quot;c&quot;&gt;# 其他sed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;选择性地显示特定行&quot;&gt;选择性地显示特定行&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; &lt;span class=&quot;c&quot;&gt;# 显示文件中的前10行 （模拟“head”的行为）&lt;/span&gt;
 sed 10q

 &lt;span class=&quot;c&quot;&gt;# 显示文件中的第一行 （模拟“head -1”命令）&lt;/span&gt;
 sed q

 &lt;span class=&quot;c&quot;&gt;# 显示文件中的最后10行 （模拟“tail”）&lt;/span&gt;
 sed -e :a -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;$q;N;11,$D;ba&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 显示文件中的最后2行（模拟“tail -2”命令）&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;$!N;$!D&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 显示文件中的最后一行（模拟“tail -1”）&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;$!d&amp;#39;&lt;/span&gt;                        &lt;span class=&quot;c&quot;&gt;# 方法1&lt;/span&gt;
 sed -n &lt;span class=&quot;s1&quot;&gt;&amp;#39;$p&amp;#39;&lt;/span&gt;                      &lt;span class=&quot;c&quot;&gt;# 方法2&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 显示文件中的倒数第二行&lt;/span&gt;
 sed -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;$!{h;d;}&amp;#39;&lt;/span&gt; -e x              &lt;span class=&quot;c&quot;&gt;# 当文件中只有一行时，输入空行&lt;/span&gt;
 sed -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;1{$q;}&amp;#39;&lt;/span&gt; -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;$!{h;d;}&amp;#39;&lt;/span&gt; -e x  &lt;span class=&quot;c&quot;&gt;# 当文件中只有一行时，显示该行&lt;/span&gt;
 sed -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;1{$d;}&amp;#39;&lt;/span&gt; -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;$!{h;d;}&amp;#39;&lt;/span&gt; -e x  &lt;span class=&quot;c&quot;&gt;# 当文件中只有一行时，不输出&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 只显示匹配正则表达式的行（模拟“grep”）&lt;/span&gt;
 sed -n &lt;span class=&quot;s1&quot;&gt;&amp;#39;/regexp/p&amp;#39;&lt;/span&gt;               &lt;span class=&quot;c&quot;&gt;# 方法1&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/regexp/!d&amp;#39;&lt;/span&gt;                 &lt;span class=&quot;c&quot;&gt;# 方法2&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 只显示“不”匹配正则表达式的行（模拟“grep -v”）&lt;/span&gt;
 sed -n &lt;span class=&quot;s1&quot;&gt;&amp;#39;/regexp/!p&amp;#39;&lt;/span&gt;              &lt;span class=&quot;c&quot;&gt;# 方法1，与前面的命令相对应&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/regexp/d&amp;#39;&lt;/span&gt;                  &lt;span class=&quot;c&quot;&gt;# 方法2，类似的语法&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 查找“regexp”并将匹配行的上一行显示出来，但并不显示匹配行&lt;/span&gt;
 sed -n &lt;span class=&quot;s1&quot;&gt;&amp;#39;/regexp/{g;1!p;};h&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 查找“regexp”并将匹配行的下一行显示出来，但并不显示匹配行&lt;/span&gt;
 sed -n &lt;span class=&quot;s1&quot;&gt;&amp;#39;/regexp/{n;p;}&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 显示包含“regexp”的行及其前后行，并在第一行之前加上“regexp”所&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# 在行的行号 （类似“grep -A1 -B1”）&lt;/span&gt;
 sed -n -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;/regexp/{=;x;1!p;g;$!N;p;D;}&amp;#39;&lt;/span&gt; -e h

 &lt;span class=&quot;c&quot;&gt;# 显示包含“AAA”、“BBB”或“CCC”的行（任意次序）&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/AAA/!d; /BBB/!d; /CCC/!d&amp;#39;&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 字串的次序不影响结果&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 显示包含“AAA”、“BBB”和“CCC”的行（固定次序）&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/AAA.*BBB.*CCC/!d&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 显示包含“AAA”“BBB”或“CCC”的行 （模拟“egrep”）&lt;/span&gt;
 sed -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;/AAA/b&amp;#39;&lt;/span&gt; -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;/BBB/b&amp;#39;&lt;/span&gt; -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;/CCC/b&amp;#39;&lt;/span&gt; -e d    &lt;span class=&quot;c&quot;&gt;# 多数sed&lt;/span&gt;
 gsed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/AAA\|BBB\|CCC/!d&amp;#39;&lt;/span&gt;                        &lt;span class=&quot;c&quot;&gt;# 对GNU sed有效&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 显示包含“AAA”的段落 （段落间以空行分隔）&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# HHsed v1.5 必须在“x;”后加入“G;”，接下来的3个脚本都是这样&lt;/span&gt;
 sed -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;/./{H;$!d;}&amp;#39;&lt;/span&gt; -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;x;/AAA/!d;&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 显示包含“AAA”“BBB”和“CCC”三个字串的段落 （任意次序）&lt;/span&gt;
 sed -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;/./{H;$!d;}&amp;#39;&lt;/span&gt; -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;x;/AAA/!d;/BBB/!d;/CCC/!d&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 显示包含“AAA”、“BBB”、“CCC”三者中任一字串的段落 （任意次序）&lt;/span&gt;
 sed -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;/./{H;$!d;}&amp;#39;&lt;/span&gt; -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;x;/AAA/b&amp;#39;&lt;/span&gt; -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;/BBB/b&amp;#39;&lt;/span&gt; -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;/CCC/b&amp;#39;&lt;/span&gt; -e d
 gsed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/./{H;$!d;};x;/AAA\|BBB\|CCC/b;d&amp;#39;&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;# 只对GNU sed有效&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 显示包含65个或以上字符的行&lt;/span&gt;
 sed -n &lt;span class=&quot;s1&quot;&gt;&amp;#39;/^.\{65\}/p&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 显示包含65个以下字符的行&lt;/span&gt;
 sed -n &lt;span class=&quot;s1&quot;&gt;&amp;#39;/^.\{65\}/!p&amp;#39;&lt;/span&gt;            &lt;span class=&quot;c&quot;&gt;# 方法1，与上面的脚本相对应&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/^.\{65\}/d&amp;#39;&lt;/span&gt;                &lt;span class=&quot;c&quot;&gt;# 方法2，更简便一点的方法&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 显示部分文本——从包含正则表达式的行开始到最后一行结束&lt;/span&gt;
 sed -n &lt;span class=&quot;s1&quot;&gt;&amp;#39;/regexp/,$p&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 显示部分文本——指定行号范围（从第8至第12行，含8和12行）&lt;/span&gt;
 sed -n &lt;span class=&quot;s1&quot;&gt;&amp;#39;8,12p&amp;#39;&lt;/span&gt;                   &lt;span class=&quot;c&quot;&gt;# 方法1&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;8,12!d&amp;#39;&lt;/span&gt;                     &lt;span class=&quot;c&quot;&gt;# 方法2&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 显示第52行&lt;/span&gt;
 sed -n &lt;span class=&quot;s1&quot;&gt;&amp;#39;52p&amp;#39;&lt;/span&gt;                     &lt;span class=&quot;c&quot;&gt;# 方法1&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;52!d&amp;#39;&lt;/span&gt;                       &lt;span class=&quot;c&quot;&gt;# 方法2&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;52q;d&amp;#39;&lt;/span&gt;                      &lt;span class=&quot;c&quot;&gt;# 方法3, 处理大文件时更有效率&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 从第3行开始，每7行显示一次    &lt;/span&gt;
 gsed -n &lt;span class=&quot;s1&quot;&gt;&amp;#39;3~7p&amp;#39;&lt;/span&gt;                   &lt;span class=&quot;c&quot;&gt;# 只对GNU sed有效&lt;/span&gt;
 sed -n &lt;span class=&quot;s1&quot;&gt;&amp;#39;3,${p;n;n;n;n;n;n;}&amp;#39;&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;# 其他sed&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 显示两个正则表达式之间的文本（包含）&lt;/span&gt;
 sed -n &lt;span class=&quot;s1&quot;&gt;&amp;#39;/Iowa/,/Montana/p&amp;#39;&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;# 区分大小写方式&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;选择性地删除特定行&quot;&gt;选择性地删除特定行&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; &lt;span class=&quot;c&quot;&gt;# 显示通篇文档，除了两个正则表达式之间的内容&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/Iowa/,/Montana/d&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 删除文件中相邻的重复行（模拟“uniq”）&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# 只保留重复行中的第一行，其他行删除&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;$!N; /^\(.*\)\n\1$/!P; D&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 删除文件中的重复行，不管有无相邻。注意hold space所能支持的缓存&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# 大小，或者使用GNU sed。&lt;/span&gt;
 sed -n &lt;span class=&quot;s1&quot;&gt;&amp;#39;G; s/\n/&amp;amp;&amp;amp;/; /^\([ -~]*\n\).*\n\1/d; s/\n//; h; P&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 删除除重复行外的所有行（模拟“uniq -d”）&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;$!N; s/^\(.*\)\n\1$/\1/; t; D&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 删除文件中开头的10行&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;1,10d&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 删除文件中的最后一行&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;$d&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 删除文件中的最后两行&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;N;$!P;$!D;$d&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 删除文件中的最后10行&lt;/span&gt;
 sed -e :a -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;$d;N;2,10ba&amp;#39;&lt;/span&gt; -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;P;D&amp;#39;&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# 方法1&lt;/span&gt;
 sed -n -e :a -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;1,10!{P;N;D;};N;ba&amp;#39;&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 方法2&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 删除8的倍数行&lt;/span&gt;
 gsed &lt;span class=&quot;s1&quot;&gt;&amp;#39;0~8d&amp;#39;&lt;/span&gt;                           &lt;span class=&quot;c&quot;&gt;# 只对GNU sed有效&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;n;n;n;n;n;n;n;d;&amp;#39;&lt;/span&gt;                &lt;span class=&quot;c&quot;&gt;# 其他sed&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 删除匹配式样的行&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/pattern/d&amp;#39;&lt;/span&gt;                      &lt;span class=&quot;c&quot;&gt;# 删除含pattern的行。当然pattern&lt;/span&gt;
                                       &lt;span class=&quot;c&quot;&gt;# 可以换成任何有效的正则表达式&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 删除文件中的所有空行（与“grep &amp;#39;.&amp;#39; ”效果相同）&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/^$/d&amp;#39;&lt;/span&gt;                           &lt;span class=&quot;c&quot;&gt;# 方法1&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/./!d&amp;#39;&lt;/span&gt;                           &lt;span class=&quot;c&quot;&gt;# 方法2&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 只保留多个相邻空行的第一行。并且删除文件顶部和尾部的空行。&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# （模拟“cat -s”）&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/./,/^$/!d&amp;#39;&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;#方法1，删除文件顶部的空行，允许尾部保留一空行&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/^$/N;/\n$/D&amp;#39;&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;#方法2，允许顶部保留一空行，尾部不留空行&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 只保留多个相邻空行的前两行。&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/^$/N;/\n$/N;//D&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 删除文件顶部的所有空行&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/./,$!d&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 删除文件尾部的所有空行&lt;/span&gt;
 sed -e :a -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;/^\n*$/{$d;N;ba&amp;#39;&lt;/span&gt; -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 对所有sed有效&lt;/span&gt;
 sed -e :a -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;/^\n*$/N;/\n$/ba&amp;#39;&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;# 同上，但只对 gsed 3.02.*有效&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 删除每个段落的最后一行&lt;/span&gt;
 sed -n &lt;span class=&quot;s1&quot;&gt;&amp;#39;/^$/{p;h;};/./{x;/./p;}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;特殊应用&quot;&gt;特殊应用&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; &lt;span class=&quot;c&quot;&gt;# 移除手册页（man page）中的nroff标记。在Unix System V或bash shell下使&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# 用&amp;#39;echo&amp;#39;命令时可能需要加上 -e 选项。&lt;/span&gt;
 sed &lt;span class=&quot;s2&quot;&gt;&amp;quot;s/.`echo \\\b`//g&amp;quot;&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# 外层的双括号是必须的（Unix环境）&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/.^H//g&amp;#39;&lt;/span&gt;             &lt;span class=&quot;c&quot;&gt;# 在bash或tcsh中, 按 Ctrl-V 再按 Ctrl-H&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/.\x08//g&amp;#39;&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;# sed 1.5，GNU sed，ssed所使用的十六进制的表示方法&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 提取新闻组或 e-mail 的邮件头&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/^$/q&amp;#39;&lt;/span&gt;                &lt;span class=&quot;c&quot;&gt;# 删除第一行空行后的所有内容&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 提取新闻组或 e-mail 的正文部分&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;1,/^$/d&amp;#39;&lt;/span&gt;              &lt;span class=&quot;c&quot;&gt;# 删除第一行空行之前的所有内容&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 从邮件头提取“Subject”（标题栏字段），并移除开头的“Subject:”字样&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/^Subject: */!d; s///;q&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 从邮件头获得回复地址&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/^Reply-To:/q; /^From:/h; /./d;g;q&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 获取邮件地址。在上一个脚本所产生的那一行邮件头的基础上进一步的将非电邮&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# 地址的部分剃除。（见上一脚本）&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/ *(.*)//; s/&amp;gt;.*//; s/.*[:&amp;lt;] *//&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 在每一行开头加上一个尖括号和空格（引用信息）&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/^/&amp;gt; /&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 将每一行开头处的尖括号和空格删除（解除引用）&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/^&amp;gt; //&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 移除大部分的HTML标签（包括跨行标签）&lt;/span&gt;
 sed -e :a -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/&amp;lt;[^&amp;gt;]*&amp;gt;//g;/&amp;lt;/N;//ba&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 将分成多卷的uuencode文件解码。移除文件头信息，只保留uuencode编码部分。&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# 文件必须以特定顺序传给sed。下面第一种版本的脚本可以直接在命令行下输入；&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# 第二种版本则可以放入一个带执行权限的shell脚本中。（由Rahul Dhesi的一&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# 个脚本修改而来。）&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/^end/,/^begin/d&amp;#39;&lt;/span&gt; file1 file2 ... fileX &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; uudecode   &lt;span class=&quot;c&quot;&gt;# vers. 1&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/^end/,/^begin/d&amp;#39;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$@&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; uudecode                    &lt;span class=&quot;c&quot;&gt;# vers. 2&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 将文件中的段落以字母顺序排序。段落间以（一行或多行）空行分隔。GNU sed使用&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# 字元“\v”来表示垂直制表符，这里用它来作为换行符的占位符——当然你也可以&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# 用其他未在文件中使用的字符来代替它。&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/./{H;d;};x;s/\n/={NL}=/g&amp;#39;&lt;/span&gt; file &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sort &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;1s/={NL}=//;s/={NL}=/\n/g&amp;#39;&lt;/span&gt;
 gsed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/./{H;d};x;y/\n/\v/&amp;#39;&lt;/span&gt; file &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sort &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;1s/\v//;y/\v/\n/&amp;#39;&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# 分别压缩每个.TXT文件，压缩后删除原来的文件并将压缩后的.ZIP文件&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# 命名为与原来相同的名字（只是扩展名不同）。（DOS环境：“dir /b”&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# 显示不带路径的文件名）。&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; @echo off &amp;gt;zipup.bat
 dir /b *.txt &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sed &lt;span class=&quot;s2&quot;&gt;&amp;quot;s/^\(.*\)\.TXT/pkzip -mo \1 \1.TXT/&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt;zipup.bat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用SED：Sed接受一个或多个编辑命令，并且每读入一行后就依次应用这些命令。
当读入第一行输入后，sed对其应用所有的命令，然后将结果输出。接着再读入第二
行输入，对其应用所有的命令……并重复这个过程。上一个例子中sed由标准输入设
备（即命令解释器，通常是以管道输入的形式）获得输入。在命令行给出一个或多
个文件名作为参数时，这些文件取代标准输入设备成为sed的输入。sed的输出将被
送到标准输出（显示器）。因此：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; cat filename &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;10q&amp;#39;&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;# 使用管道输入&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;10q&amp;#39;&lt;/span&gt; filename               &lt;span class=&quot;c&quot;&gt;# 同样效果，但不使用管道输入&lt;/span&gt;
 sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;10q&amp;#39;&lt;/span&gt; filename &amp;gt; newfile     &lt;span class=&quot;c&quot;&gt;# 将输出转移（重定向）到磁盘上&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要了解sed命令的使用说明，包括如何通过脚本文件（而非从命令行）来使用这些命
令，请参阅《sed &amp;amp; awk》第二版，作者Dale Dougherty和Arnold Robbins
（O&amp;#39;Reilly，1997；&lt;a href=&quot;http://www.ora.com&quot;&gt;http://www.ora.com&lt;/a&gt;） ，
&lt;code&gt;《UNIX Text Processing》&lt;/code&gt;，作者Dale Dougherty和Tim O&amp;#39;Reilly
（Hayden Books，1987）或者是Mike Arst写的教程——压缩包的名称是“U-SEDIT2.ZIP”
（在许多站点上都找得到）。要发掘sed的潜力，则必须对“正则表达式”有足够的理解。
正则表达式的资料可以看《Mastering Regular Expressions》作
者Jeffrey Friedl（O&amp;#39;reilly 1997）。Unix系统所提供的手册页（“man”）
也会有所帮助（试一下这些命令“man sed”、“man regexp”，或者看“man ed”中关于
正则表达式的部分），但手册提供的信息比较“抽象”——这也是它一直为人所诟病的。
不过，它本来就不是用来教初学者如何使用sed或正则表达式的教材，而只是为那些
熟悉这些工具的人提供的一些文本参考。&lt;/p&gt;

&lt;p&gt;括号语法：前面的例子对sed命令基本上都使用单引号（&amp;#39;...&amp;#39;）而非双引号
（&amp;quot;...&amp;quot;）这是因为sed通常是在Unix平台上使用。单引号下，Unix的shell（命令
解释器）不会对美元符（$）和后引号（`...`）进行解释和执行。而在双引号下
美元符会被展开为变量或参数的值，后引号中的命令被执行并以输出的结果代替
后引号中的内容。而在“csh”及其衍生的shell中使用感叹号（!）时需要在其前
面加上转义用的反斜杠（就像这样：!）以保证上面所使用的例子能正常运行
（包括使用单引号的情况下）。DOS版本的Sed则一律使用双引号（&amp;quot;...&amp;quot;）而不是
引号来圈起命令。&lt;/p&gt;

&lt;p&gt;&amp;#39;\t&amp;#39;的用法：为了使本文保持行文简洁，我们在脚本中使用&amp;#39;\t&amp;#39;来表示一个制表
符。但是现在大部分版本的sed还不能识别&amp;#39;\t&amp;#39;的简写方式，因此当在命令行中为
脚本输入制表符时，你应该直接按TAB键来输入制表符而不是输入&amp;#39;\t&amp;#39;。下列的工
具软件都支持&amp;#39;\t&amp;#39;做为一个正则表达式的字元来表示制表符：awk、perl、HHsed、
sedmod以及GNU sed v3.02.80。&lt;/p&gt;

&lt;p&gt;不同版本的SED：不同的版本间的sed会有些不同之处，可以想象它们之间在语法上
会有差异。具体而言，它们中大部分不支持在编辑命令中间使用标签（:name）或分
支命令（b,t），除非是放在那些的末尾。这篇文档中我们尽量选用了可移植性较高
的语法，以使大多数版本的sed的用户都能使用这些脚本。不过GNU版本的sed允许使
用更简洁的语法。想像一下当读者看到一个很长的命令时的心情：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;   sed -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;/AAA/b&amp;#39;&lt;/span&gt; -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;/BBB/b&amp;#39;&lt;/span&gt; -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;/CCC/b&amp;#39;&lt;/span&gt; -e d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好消息是GNU sed能让命令更紧凑：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;   sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/AAA/b;/BBB/b;/CCC/b;d&amp;#39;&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;# 甚至可以写成&lt;/span&gt;
   sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/AAA\|BBB\|CCC/b;d&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此外，请注意虽然许多版本的sed接受象“/one/ s/RE1/RE2/”这种在&amp;#39;s&amp;#39;前带有空
格的命令，但这些版本中有些却不接受这样的命令:“/one/! s/RE1/RE2/”。这时
只需要把中间的空格去掉就行了。&lt;/p&gt;

&lt;p&gt;速度优化：当由于某种原因（比如输入文件较大、处理器或硬盘较慢等）需要提高
命令执行速度时，可以考虑在替换命令（“s/.../.../”）前面加上地址表达式来
提高速度。举例来说：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;   sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/foo/bar/g&amp;#39;&lt;/span&gt; filename         &lt;span class=&quot;c&quot;&gt;# 标准替换命令&lt;/span&gt;
   sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/foo/ s/foo/bar/g&amp;#39;&lt;/span&gt; filename   &lt;span class=&quot;c&quot;&gt;# 速度更快&lt;/span&gt;
   sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;/foo/ s//bar/g&amp;#39;&lt;/span&gt; filename      &lt;span class=&quot;c&quot;&gt;# 简写形式&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当只需要显示文件的前面的部分或需要删除后面的内容时，可以在脚本中使用“q”
命令（退出命令）。在处理大的文件时，这会节省大量时间。因此：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;   sed -n &amp;#39;45,50p&amp;#39; filename           # 显示第45到50行
   sed -n &amp;#39;51q;45,50p&amp;#39; filename       # 一样，但快得多
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你有其他的单行脚本想与大家分享或者你发现了本文档中错误的地方，请发电
子邮件给本文档的作者（Eric Pement）。邮件中请记得提供你所使用的sed版本、 
该sed所运行的操作系统及对问题的适当描述。本文所指的单行脚本指命令行的长
度在65个字符或65个以下的sed脚本〔译注1〕。本文档的各种脚本是由以下所列作
者所写或提供：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Al Aab                                建立了“seders”邮件列表&lt;/li&gt;
&lt;li&gt;Edgar Allen                           许多方面&lt;/li&gt;
&lt;li&gt;Yiorgos Adamopoulos                   许多方面&lt;/li&gt;
&lt;li&gt;Dale Dougherty                        《sed &amp;amp; awk》作者&lt;/li&gt;
&lt;li&gt;Carlos Duarte                         《do it with sed》作者&lt;/li&gt;
&lt;li&gt;Eric Pement                           本文档的作者&lt;/li&gt;
&lt;li&gt;Ken Pizzini                           GNU sed v3.02 的作者&lt;/li&gt;
&lt;li&gt;S.G. Ravenhall                        去html标签脚本&lt;/li&gt;
&lt;li&gt;Greg Ubben                            有诸多贡献并提供了许多帮助&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;译注1：大部分情况下，sed脚本无论多长都能写成单行的形式（通过&amp;#39;-e&amp;#39;选项和&amp;#39;;&amp;#39;
号）——只要命令解释器支持，所以这里说的单行脚本除了能写成一行还对长度有
所限制。因为这些单行脚本的意义不在于它们是以单行的形式出现。而是让用户能
方便地在命令行中使用这些紧凑的脚本才是其意义所在。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Valid XHTML 1.0 Strict&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Jul 2015 19:11:20 +0800</pubDate>
        <link>/2015/07/24/sed-quick-guide/</link>
        <guid isPermaLink="true">/2015/07/24/sed-quick-guide/</guid>
        
        <category>Shell</category>
        
        <category>搬运</category>
        
        
        <category>shell</category>
        
        <category>搬运</category>
        
      </item>
    
      <item>
        <title>[搬运] 如何成为一名黑客</title>
        <description>&lt;p&gt;原文文档：&lt;a href=&quot;http://catb.org/%7Eesr/faqs/hacker-howto.html&quot;&gt;http://catb.org/~esr/faqs/hacker-howto.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;为什么会有这份文档？&quot;&gt;为什么会有这份文档？&lt;/h3&gt;

&lt;p&gt;作为 [&lt;a href=&quot;http://www.catb.org/jargon&quot;&gt;http://www.catb.org/jargon&lt;/a&gt; Jargon File]（译注：黑客行话大全）的编辑和几份其他类似性质知名文章的作者，我经常收到充满热情的网络新手的电子邮件询问：“我如何才能成为一名出色的 Hacker？”早在 1996 年，我注意到网上似乎没有任何的 FAQ 或者 Web 形式的文档提到及这个至关重要的问题，因此我写了这份文档。现在，很多 Hacker 都认为这是一篇权威性文档，那我也姑且这么认为吧。不过，我不认为我是这个话题的绝对权威；如果你不喜欢这篇文档，你也可以自己写一份。&lt;/p&gt;

&lt;p&gt;如果你读到的是这份文档的离线拷贝，你可以在 &lt;a href=&quot;http://catb.org/%7Eesr/faqs/hacker-howto.html&quot;&gt;http://catb.org/~esr/faqs/hacker-howto.html&lt;/a&gt; 读到最新版本。&lt;/p&gt;

&lt;p&gt;注意：文档的结尾有一份 [&lt;a href=&quot;http://translations.readthedocs.org/en/latest/hacker_howto.html#faq&quot;&gt;http://translations.readthedocs.org/en/latest/hacker_howto.html#faq&lt;/a&gt; FAQ（常见问题解答）]。如果你想通过邮件询问我关于这份文档的问题，请先读这份 FAQ 看看能否找到答案——一遍不行就读两遍。&lt;/p&gt;

&lt;p&gt;目前这份文档有很多翻译版本：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[&lt;a href=&quot;http://www.slashproc.net/doc/howto-ar.html&quot;&gt;http://www.slashproc.net/doc/howto-ar.html&lt;/a&gt; 阿拉伯语]&lt;/li&gt;
&lt;li&gt;[&lt;a href=&quot;http://moneyaisle.com/worldwide/how-to-become-a-hacker-be&quot;&gt;http://moneyaisle.com/worldwide/how-to-become-a-hacker-be&lt;/a&gt; 白俄罗斯语]&lt;/li&gt;
&lt;li&gt;[&lt;a href=&quot;http://www.olemichaelsen.dk/hacker-howto.html&quot;&gt;http://www.olemichaelsen.dk/hacker-howto.html&lt;/a&gt; 丹麦语]&lt;/li&gt;
&lt;li&gt;[&lt;a href=&quot;http://www.knudde.be/index.php?page_name=hacker_howto&quot;&gt;http://www.knudde.be/index.php?page_name=hacker_howto&lt;/a&gt; 荷兰语] &lt;/li&gt;
&lt;li&gt;[&lt;a href=&quot;http://www.kakupesa.net/hacker&quot;&gt;http://www.kakupesa.net/hacker&lt;/a&gt; 爱沙尼亚语]&lt;/li&gt;
&lt;li&gt;[&lt;a href=&quot;http://www.linuxtaskforce.de/hacker-howto-ger.html&quot;&gt;http://www.linuxtaskforce.de/hacker-howto-ger.html&lt;/a&gt; 德语]&lt;/li&gt;
&lt;li&gt;[&lt;a href=&quot;http://users.otenet.gr/%7Eindy90/hacker-howto-gr/&quot;&gt;http://users.otenet.gr/%7Eindy90/hacker-howto-gr/&lt;/a&gt; 希腊语]&lt;/li&gt;
&lt;li&gt;[&lt;a href=&quot;http://www.victorfleur.com/documents/hacker.html&quot;&gt;http://www.victorfleur.com/documents/hacker.html&lt;/a&gt; 意大利语] &lt;/li&gt;
&lt;li&gt;[&lt;a href=&quot;http://he.wikisource.org/wiki/%D7%90%D7%99%D7%9A_%D7%9C%D7%94%D7%99%D7%95%D7%AA_%D7%94%D7%90%D7%A7%D7%A8&quot;&gt;http://he.wikisource.org/wiki/%D7%90%D7%99%D7%9A_%D7%9C%D7%94%D7%99%D7%95%D7%AA_%D7%94%D7%90%D7%A7%D7%A8&lt;/a&gt; 希伯来语]&lt;/li&gt;
&lt;li&gt; [&lt;a href=&quot;http://stian.atlantiscrew.net/doc/hacker-howto.html&quot;&gt;http://stian.atlantiscrew.net/doc/hacker-howto.html&lt;/a&gt; 挪威语] &lt;/li&gt;
&lt;li&gt;[&lt;a href=&quot;http://jvdm.sdf1.org/pt/raquer-howto/&quot;&gt;http://jvdm.sdf1.org/pt/raquer-howto/&lt;/a&gt; 葡萄牙语（巴西）]&lt;/li&gt;
&lt;li&gt;[&lt;a href=&quot;http://garaj.xhost.ro/hacker-howto/hacker-howto.ro.htm&quot;&gt;http://garaj.xhost.ro/hacker-howto/hacker-howto.ro.htm&lt;/a&gt; 罗马尼亚语] &lt;/li&gt;
&lt;li&gt;[&lt;a href=&quot;http://www.sindominio.net/biblioweb/telematica/hacker-como.html&quot;&gt;http://www.sindominio.net/biblioweb/telematica/hacker-como.html&lt;/a&gt; 西班牙语]&lt;/li&gt;
&lt;li&gt;[&lt;a href=&quot;http://www.belgeler.org/howto/hacker-howto/hacker-howto.html&quot;&gt;http://www.belgeler.org/howto/hacker-howto/hacker-howto.html&lt;/a&gt; 土耳其语]&lt;/li&gt;
&lt;li&gt;[&lt;a href=&quot;http://www1.tripnet.se/%7Emly/open/faqs/hacker-howto.se.html&quot;&gt;http://www1.tripnet.se/%7Emly/open/faqs/hacker-howto.se.html&lt;/a&gt; 瑞典语] &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意由于这份文档时有修正，所以以上翻译版本可能有不同程度的过时。&lt;/p&gt;

&lt;p&gt;装饰本文的“五点九宫格”图像被称作“glider”，在一种叫做[&lt;a href=&quot;http://dmoz.org/Computers/Artificial_Life/Cellular_Automata/&quot;&gt;http://dmoz.org/Computers/Artificial_Life/Cellular_Automata/&lt;/a&gt; Life]的数学模型中，这个简单的样本有一些异乎寻常的属性，多年以来 Hacker 们都为此着迷。我认为这个图像是一个很好的黑客徽标：它显得抽象而且神秘，而且像是一扇大门，通向一个截然不同的有其内在逻辑的世界。你可以阅读更多关于[&lt;a href=&quot;http://www.catb.org/%7Eesr/hacker-emblem/&quot;&gt;http://www.catb.org/~esr/hacker-emblem/&lt;/a&gt; Glider 徽标] 的内容。&lt;/p&gt;

&lt;h3 id=&quot;什么是黑客？&quot;&gt;什么是黑客？&lt;/h3&gt;

&lt;p&gt;[&lt;a href=&quot;http://www.catb.org/jargon&quot;&gt;http://www.catb.org/jargon&lt;/a&gt; Jargon File]讲了一堆关于“hacker”这个词的定义，大部分是关于“技术高超”、“热衷解决问题”、以及“超越极限”的内容。但如果你只想知道如何成为一名黑客的话，真正重要的只有两条。&lt;/p&gt;

&lt;p&gt;这可以追溯到几十年前，那时候第一代分时微型计算机才刚刚诞生, 而 ARPAnet 的实验也才刚展开。那时的编程专家和组网高手建立了一个具有共享性质的文化社群， “hacker” 这个名词就是其中的成员创造的。黑客们建立了互联网，黑客们让 Unix 操作系统演化到现在的模样，黑客们经营着 Usenet，黑客们让万维网运转起来。如果你是这个文化的一部分，如果你对这种文化有所贡献，而且这个社群的其它成员也认识你并称你为 hacker，那么你就是一名黑客。&lt;/p&gt;

&lt;p&gt;黑客的思维方式并不仅仅局限在软件黑客的文化圈内。也有人用黑客态度对待其它事情，如电子和音乐方面——其实你可以在任何最高级别的科学和艺术活动中发现它的身影。软件黑客对这些领域的践行者尊重有加，并把他们也称作黑客——有人宣称黑客天性是绝对独立于他们工作的特定领域的。但在这份文档中，我们将集中书写在软件黑客的技术和态度，以及发明了“黑客”一词的、以共享为特征的文化传统。&lt;/p&gt;

&lt;p&gt;有另外一群人大声嚷嚷着自己是黑客，但他们根本不是。他们主要由青少年男性构成，是一些蓄意破坏计算机和电话系统的人。真正的黑客把这些人叫做“骇客”(cracker)，并不屑与之为伍。黑客们通常认为他们是一群懒散、没有责任心、而且不是很聪明的人。会通过热接线发动汽车并不意味着你是一个汽车工程师。一样的道理，会破坏安全也不意味着你是一名黑客，不幸的是，很多记者和作家往往错把“骇客”当成黑客；这种做法一直使真正的黑客感到恼火。&lt;/p&gt;

&lt;p&gt;根本的区别是：黑客搞建设，骇客搞破坏。&lt;/p&gt;

&lt;p&gt;如果你想成为一名黑客，请接着读下去。如果你想做一个骇客，就去读 alt.2600 新闻组吧，顺便准备好去蹲个五到十年的监狱，而且最终你会意识到你并不像自己想象的那么聪明。&lt;/p&gt;

&lt;p&gt;关于骇客，我能说的只有这些。&lt;/p&gt;

&lt;h3 id=&quot;黑客的态度&quot;&gt;黑客的态度&lt;/h3&gt;

&lt;p&gt;黑客们解决问题，建设事物，同时他们信仰自由和无私的双向帮助。要想作为一名黑客被社群认同，你需要体现出自己已经具备了这种态度。而要体现出这种态度，你就得真正相信和赞同这种态度。&lt;/p&gt;

&lt;p&gt;但是，如果你认为培养黑客态度只是进入黑客文化圈的敲门砖，那就大错特错了。这种态度将有助于有助于你的学习，并且能为你提供源源不断的动力，所以它对你而言是至关重要的。和所有创造性的艺术一样，成为大师的最有效方法，就是模仿大师的精神——智力上的模仿还不够，还要从感情上进行模仿。&lt;/p&gt;

&lt;p&gt;或者正如下面这首现代的禅诗讲的：
 修行之道：
 关注大师的言行，
 跟随大师的举动，
 和大师一并修行，
 领会大师的意境，
 成为真正的大师。&lt;/p&gt;

&lt;p&gt;所以，如果你想成为一名黑客，反复读下面的事情直至你相信它们为止：&lt;/p&gt;

&lt;h4 id=&quot;这个世界充满了令人着迷的问题等着我们解决&quot;&gt;这个世界充满了令人着迷的问题等着我们解决&lt;/h4&gt;

&lt;p&gt;做一名黑客会有很多乐趣，但是这些乐趣需要付出很多努力才能获得。这些努力需要动力。成功的运动员在表演和超越自我极限的时候获得身体上的愉悦，并把这种愉悦作为自己的动力。同样，为了成为一名黑客，你要从解决问题、磨练技术，以及锻炼智力中得到基本的享受。&lt;/p&gt;

&lt;p&gt;如果你不是天性如此，而你又想成为一名黑客，你就要设法成为这样的人。否则你会发现，你的黑客热情会被其他分心的事物吞噬掉——如金钱、性、以及社交圈的认同。&lt;/p&gt;

&lt;p&gt;（你必须建立对于自己学习能力的信念——就算你掌握的知识不足以解决当前的问题，如果你从问题的一小部分下手并从中学习，你将学到足够的知识用来解决下一部分——以此类推，直到整个问题都被你解决为止。）&lt;/p&gt;

&lt;h4 id=&quot;一个问题不应该被解决两次&quot;&gt;一个问题不应该被解决两次&lt;/h4&gt;

&lt;p&gt;有创新能力的大脑是一种宝贵的有限资源。当世界还充满非常多有待解决的有趣的新问题时，它们不应该被浪费在重新发明轮子的事情上。&lt;/p&gt;

&lt;p&gt;作为一名黑客，你必须相信其他黑客的思考时间是宝贵的——因此共享信息、解决问题、并发布结果给其他黑客几乎是一种道义，这样其他人就可以去解决新问题，而不用在旧问题上面浪费精力了。&lt;/p&gt;

&lt;p&gt;（这并不是在说你有义务把自己所有的作品都免费发布出来，但这样做的黑客能获得大家最大的尊敬。使用黑客技能养家糊口甚至发财致富都没关系，只要你别忘记自己作为一个黑客的责任，不背离黑客群体即可。）&lt;/p&gt;

&lt;h4 id=&quot;无聊和乏味的工作是罪恶&quot;&gt;无聊和乏味的工作是罪恶&lt;/h4&gt;

&lt;p&gt;黑客（以及所有创造力的人们）都不应该被愚蠢的重复性劳动所困扰。重复性劳动浪费了他们解决新问题的时间，而解决新问题正是黑客最大的价值所在。这种浪费会伤害到每一个人。无聊和乏味的工作不仅仅是令人不舒服而已，而且本身就是一种罪恶。&lt;/p&gt;

&lt;p&gt;作为一个黑客，你必须坚信这点并尽可能多地将乏味的工作自动化，这不仅是为了你自己，也是为了其他人（尤其是其他黑客们）。&lt;/p&gt;

&lt;p&gt;(对此有一个明显的例外。黑客有时为了休息大脑、学习技能、或者别的特别的原因，也会做一些在他人看来是重复性或枯燥的事情。但这是自愿的——只要是有思维能力的人，就不应该被迫做无聊的活儿。）&lt;/p&gt;

&lt;h4 id=&quot;崇尚自由&quot;&gt;崇尚自由&lt;/h4&gt;

&lt;p&gt;黑客们是天生的反权威主义者。任何能向你发号施令的人都可以让你停止解决令你着迷的问题，同时，按照权威主义者的一般思路，他通常会给出一些极端愚昧的理由。因此，不论何处，任何权威主义的做法，只要它影响到了你和其他的黑客，你就要和它斗到底。&lt;/p&gt;

&lt;p&gt;（这并非向所有权威挑战。儿童需要监护，罪犯要被看管起来。如果服从命令得到某种东西比起用其他方式得到它更节约时间，黑客可以同意接受某种形式的权威。但这是一个有限度的，斟酌过的的交易；那种权威主义者想要的个人服从是不在考虑范围内的。）&lt;/p&gt;

&lt;p&gt;权威主义者喜欢审查和保密。他们不信任自愿的合作和信息的共享——他们只喜欢由他们控制的所谓“合作”。因此，作为一个黑客，你应该对审查、保密，以及使用武力或欺骗去压迫有行为能力的人们的做法有一种本能的敌意。同时你要有为此信念付出的意愿。&lt;/p&gt;

&lt;h4 id=&quot;态度不能替代能力&quot;&gt;态度不能替代能力&lt;/h4&gt;

&lt;p&gt;作为一名黑客，你必须培养起这些态度。但只具备这些态度并不能使你成为一名黑客，也不能使你成为一个运动健将和摇滚明星。成为一名黑客需要智力、实践、奉献精神、以及辛苦的工作。&lt;/p&gt;

&lt;p&gt;因此，你必须学着忽略态度问题，并尊重各种各样的能力。黑客们不会为那些装模做样的人浪费时间，但他们却非常尊重能力——尤其是从事黑客工作的能力（虽然有能力总归是好事）。如果能具备少有人能掌握的技能就更好了，当然如果你具备一些急需的技能，而这些技能又需要敏锐的思维、高超的技巧、和专注的精神，那就是再好不过了。&lt;/p&gt;

&lt;p&gt;如果你尊重能力，你就会享受到提高自己能力的乐趣——辛苦的工作和奉献将不会是一件苦差事，而是一种紧张的娱乐，这是成为黑客至关重要重要的一点。&lt;/p&gt;

&lt;h3 id=&quot;黑客的基本技能&quot;&gt;黑客的基本技能&lt;/h3&gt;

&lt;p&gt;黑客态度重要，但技术更加重要。态度无法替代技术，在你被别的黑客称为黑客之前，你必须掌握一些基本的技术作为你随身携带的工具。&lt;/p&gt;

&lt;p&gt;随着新技术的出现和老技术的过时，这个工具包的内容也在不断改变。比如以前机器语言编程也被列在里边，而 HTML 是直到最近才包括进去的。不过现在可以清楚地告诉你包含以下内容：&lt;/p&gt;

&lt;h4 id=&quot;学习如何编程&quot;&gt;学习如何编程&lt;/h4&gt;

&lt;p&gt;这一条无须多说，当然是最基本的黑客技能。如果你还不会任何编程语言，我建议你从 Python 开始学起。它设计清晰，文档齐全，而且对初学者比较友好。虽然它很适合作为一种入门语言，但它不仅仅只是个玩具；它非常强大、灵活，也适合做大型项目。我在一篇更详细的[&lt;a href=&quot;http://www.linuxjournal.com/article.php?sid=3882&quot;&gt;http://www.linuxjournal.com/article.php?sid=3882&lt;/a&gt; Evaluation of Python]（译注：Python 试用体验）中有更详细的论述。[&lt;a href=&quot;http://docs.python.org/tutorial/&quot;&gt;http://docs.python.org/tutorial/&lt;/a&gt; Python 网站]有很好的[&lt;a href=&quot;http://sebug.net/paper/python/&quot;&gt;http://sebug.net/paper/python/&lt;/a&gt; 入门教程]。&lt;/p&gt;

&lt;p&gt;我曾经推荐过将 Java 作为初学的语言，但[&lt;a href=&quot;http://www.crosstalkonline.org/storage/issue-archives/2008/200801/200801-Dewar.pdf&quot;&gt;http://www.crosstalkonline.org/storage/issue-archives/2008/200801/200801-Dewar.pdf&lt;/a&gt; 这则批评]改变了我的想法（在里边搜索”The Pitfalls of Java as a First Programming Language” 就知道我的意思了）。作为一名黑客，你不能像人们挖苦的一样，“像水管工人一样装电脑”，你必须知道各个部件的工作原理。现在我觉得可能还是学过 C 和 Lisp 后再学 Java 比较好。&lt;/p&gt;

&lt;p&gt;有一个大体的规律，就是如果你过于偏重使用一种语言，这种语言一方面会成为你得心应手的工具，另一方面也会阻碍你的学习。有这个问题的不只是编程语言，类似 RubyOnRails、CakePHP、以及 Django 的 web 应用框架也有这个问题，它们只会让你肤浅地懂得一些东西，当你碰到难以解决的问题或者需要调试时，你就可能不知所措了。&lt;/p&gt;

&lt;p&gt;如果你想进入正式的编程领域，你将不得不学习 C 语言，它是 Unix 的核心语言。C++ 与 C 非常其他类似；如果你了解其中一种，学习另一种应该不难。但这两种都不适合编程入门者学习。而且事实上，你越避免用C编程，你的工作效率会越高。&lt;/p&gt;

&lt;p&gt;C 语言效率极高，而且占用很少的系统资源。不幸的是，C 的高效是通过你手动做很多底层的管理（如内存管理）来达到的。底层代码都很复杂，而且极易出现 bug，你要花很多的时间调试。而现今的计算机速度如此之快，花时间调试程序通常是得不偿失——比较明智的做法是使用一种运行较慢、效率较低，但能大幅节省你的开发时间的语言。因此，还是选择 Python 吧。&lt;/p&gt;

&lt;p&gt;其他对黑客而言比较重要的语言包括 Perl 和 LISP。从实用的角度来说，Perl 是值得一学的；它被广泛用于动态网页和系统管理中，因此，即便你从不用Perl 写程序，至少也应该学会读懂 Perl。许多人使用 Perl 的理由和 我建议你使用 Python 的理由一样，都是为了避免用 C 完成那些不需要 C 高效率的工作。你会需要理解那些工作的代码的。&lt;/p&gt;

&lt;p&gt;LISP 值得学习的理由不同——最终掌握了它时你会得到丰富的启迪和经验。虽然你实际上很少会用到 LISP，但这些经验会使你在以后的日子里成为一个更好的程序员。&lt;/p&gt;

&lt;p&gt;当然，实际上你最好五种都会（Python，Java，C/C++，Perl 和 LISP）。除了是最重要的黑客语言外，它们还代表了截然不同的编程思路和方法，每种都会让你受益非浅。（你可以通过修改 Emacs 编辑器的模式）&lt;/p&gt;

&lt;p&gt;单单学习编程语言并不会让你达到黑客的程度，甚至连程序员的程度都难企及——你需要脱离某种编程语言的素服，学习通过编程解决问题的思路。要成为一个真正的黑客，你需要达到几天就能学会一门编程语言的水平，你可以将文档里的信息和你已经掌握的知识结合起来，很快就学会一门编程语言。这意味着你需要先学会机种思路截然不同的语言才行。&lt;/p&gt;

&lt;p&gt;编程是一个复杂的技能，我无法给你完整的指南来教会你如何编程，不过我可以告诉你，书本和课程也无法教会你如何编程——很多黑客，或者也许几乎所有的黑客，都是靠自学的。你从书本上学到语言的特点——只是一些皮毛，但要使书面知识成为自身技能，你只能通过实践和虚心向他人学习。因此你要做的就是 (a) 读代码，(b) 写代码。&lt;/p&gt;

&lt;p&gt;Peter Novig 是 Google 公司的顶尖黑客之一，而且是最受欢迎的 AI 课本的一名作者。他写了一篇好文章名叫[&lt;a href=&quot;http://norvig.com/21-days.html&quot;&gt;http://norvig.com/21-days.html&lt;/a&gt; Teach Yourself Programming in Ten Years]（译注：十年教会自己编程），其中的“recipe for programming success”（译注：编程的成功之道）尤其值得一读。&lt;/p&gt;

&lt;p&gt;学习编程就象学习自然语言写作一样。最好的做法是读一些大师的名著，试着自己写点东西，再读些，再写点，再读些，再写点……如此往复，直到你的文章具备范文的力量和感觉为止。&lt;/p&gt;

&lt;p&gt;以前要找适合阅读的好代码并不容易，因为几乎没有大型程序的源代码能让新手练手。这种状况已经戏剧性地发生变化；开源软件、编程工具、和操作系统（全都由黑客写成）现在已经随处可见。让我们在下一个话题中继续讨论……&lt;/p&gt;

&lt;h4 id=&quot;学习使用开源的-unix-系统&quot;&gt;学习使用开源的 Unix 系统&lt;/h4&gt;

&lt;p&gt;我将假设你已经有一台个人计算机供自己使用了（你可以体会一下这意味着多少东西。早些时候，计算机是如此的昂贵，没有人能买得起。而黑客文化就是在那样的环境下演化来的）。新手们能够朝学习黑客技能迈出的最基本的一步，就是找一版 Linux 或 BSD-Unix，安装在个人电脑上，并且把它跑起来。&lt;/p&gt;

&lt;p&gt;没错，这世界上除了Unix还有其他操作系统。但它们都是以二进制形式发布的——你无法读到它的源代码，也不可能修改它。尝试在运行 DOS、Windows、或 MacOS 的机器上学习黑客技术，就象是穿着骑士铠甲学跳舞。&lt;/p&gt;

&lt;p&gt;除此之外，Unix 还是 Internet 的操作系统。你可以学会上网却不知道 Unix，但你不了解 Unix 就无法成为一名 Internet 黑客。因此，今天的黑客文化在很大程度上是以 Unix 为核心的。（这点并不总是真的，一些很早的黑客对此一直很不满，但 Unix 和 Internet 之间的联系已是如此之强，就连 Microsoft 这样强力的公司也对此也无可奈何。）&lt;/p&gt;

&lt;p&gt;所以, 安装一套 Unix 吧——我个人偏爱 Linux，但还有其他种类共你选择（是的，你可以在同一电脑上同时安装 Linux 和 DOS/Windows)。学习它，运行它，鼓捣它。用它上 Internet。阅读它的源代码。修改它的源代码。你会用到很多优秀的编程工具（包括 C， LISP，Python 及 Perl），这些工具在 Windows 下是做梦都没法得到的。你会觉得乐趣无穷。当你有一天成为大师再回顾初学的日子，你会觉得那时学到的东西可真多。&lt;/p&gt;

&lt;p&gt;如果你想了解更多关于学习 Unix 的信息，读一下 The Loginataka（译注：ESR 的另一著作，可以称为黑客大藏经）吧。也许你还想看看 The Art of Unix Programming （译注：Unix 编程艺术，经典著作）。&lt;/p&gt;

&lt;p&gt;你可以访问 Linux Online! 网站，这个网站可以帮你起步。你可以从那里下载到Linux，或者更好的办法是找一个本地的 Linux 用户组，让他们帮你安装 Linux。&lt;/p&gt;

&lt;p&gt;在这份 HOWTO 文档发布后的前十年里，关于 Linux 我写的是，从新人的观点来看，所有的Linux 发行版都差不多，但在 2006-2007 之间，我们终于有了一个最佳选择： Ubuntu。我们可以说各种Linux 发行版各有千秋，但 Ubuntu 是新人最容易上手的一个发行版。&lt;/p&gt;

&lt;p&gt;你可以在 &lt;a href=&quot;http://www.bsd.org&quot;&gt;www.bsd.org&lt;/a&gt; 找到 BSD Unix 的求助及其他资源。&lt;/p&gt;

&lt;p&gt;Linux 有一种被称为 Live CD 的发行方式，这种发行版会从CD 运行起来，而且不会动到你硬盘里的东西，Live CD 是尝试 Linux 的一个不错的方法。由于光驱读写本来就比较慢，Live CD 的速度一般也会比较慢，不过 Live CD 总归是一个能尝试各种可能性而又不过激的方法。&lt;/p&gt;

&lt;p&gt;我有写一篇关于 Unix 和 Internet 基础的入门文章。&lt;/p&gt;

&lt;p&gt;对于新手，我以前不鼓励你自己独立安装Linux 或者 BSD，现在这些系统的安装工具已经足够好了，就算对新手来说，独立安装操作系统也不是不可能的事。无论如何，我还是推荐你联系本地的 Linux 用户组，向他们寻求帮助，这会进程更加顺利。&lt;/p&gt;

&lt;h4 id=&quot;学会使用万维网以及编写-html&quot;&gt;学会使用万维网以及编写 HTML&lt;/h4&gt;

&lt;p&gt;黑客文化建造的大多东西都在你看不见的地方发挥着作用。浙西东西可以帮助工厂、办公室、以及大学正常运转起来，但从表面上很难看到它们对非黑客的普通人的生活的影响。而 Web 是一个大大的例外。就连政客也同意，这个庞大耀眼的黑客玩具正在改变整个世界。就算只是因为这个（还有许多其它的原因），Web 也值得你一学。&lt;/p&gt;

&lt;p&gt;这并不是仅仅意味着如何使用浏览器（谁都会），而是要学会如何写 HTML，也就是 Web 的标记语言。如果你不会编程，写HTML会教你一些有助于学习的思考习惯。因此，先完成一个主页。（网上有很多不错的资源，比如 [&lt;a href=&quot;http://htmldog.com/&quot;&gt;http://htmldog.com/&lt;/a&gt; 这个 HTML 入门教程]。)&lt;/p&gt;

&lt;p&gt;但仅仅拥有一个主页不能使你成为一名黑客。 Web里充满了各种网页。大多数是毫无意义的、毫无信息量的垃圾——界面时髦的垃圾，不过还是垃圾（更多相关信息访问[&lt;a href=&quot;http://catb.org/%7Eesr/html-hell.html&quot;&gt;http://catb.org/~esr/html-hell.html&lt;/a&gt; The HTML Hell Page]）。&lt;/p&gt;

&lt;p&gt;要想有价值，你的网页必须有内容——它必须有趣或对其它黑客有帮助。这是下一个话题所涉及的……&lt;/p&gt;

&lt;h4 id=&quot;学习英语，如果你的水平不够用的话&quot;&gt;学习英语，如果你的水平不够用的话&lt;/h4&gt;

&lt;p&gt;作为一个以英语为母语的美国人，我以前很不情愿提到这点，免得被当做一种文化上的帝国主义。但相当多以其他语言为母语的人一直劝我指出这一点，那就是：英语是黑客文化和 Internet 的工作语言，只有懂英语，你才能在黑客社区顺利做事。&lt;/p&gt;

&lt;p&gt;大概1991年的时候，我就了解到许多黑客在技术讨论中使用英语，甚至有时他们来自同一种母语也在用英文讨论。在现阶段，英语有着比其他语言丰富得多的技术词汇，因此是一个对于工作来说相当好的工具。基于类似的原因，英文技术书籍的翻译通常都不怎么令人满意。（如果有翻译的话）。&lt;/p&gt;

&lt;p&gt;Linus Torvalds 是芬兰人，但他的代码注解是用英语写的（很明显他从没想过其他的可能性）。他流利的英语。是他能够管理全球范围的 Linux 开发人员社区的重要因素。 这是一个值得学习的例子。&lt;/p&gt;

&lt;p&gt;就算你的母语是英语，这也无法保证你的语言技能足够达到黑客的标准。如果你的写作文字不通、语法混乱、错字连篇，包括我在内的大部分的黑客都会忽略你的存在。虽然写作马虎不一定意味着思考也马虎，但我们发现两者的关联性还是挺强的——马虎的头脑对我们来说毫无价值，如果你写作能力不够，就好好学习写作吧。&lt;/p&gt;

&lt;h3 id=&quot;提高自己在黑客圈中的地位&quot;&gt;提高自己在黑客圈中的地位&lt;/h3&gt;

&lt;p&gt;和大部分不涉及金钱的文化一样，黑客王国靠声誉运转。你设法解决有趣的问题，但它们到底多有趣，你的解法有多好，是要由那些和你具有同样技术水平，或比你更厉害的人去评判的。&lt;/p&gt;

&lt;p&gt;相应地你需要认识到，当你在玩黑客游戏时，你的分数主要是靠其他黑客对你的技术的评价得到的（这就是为什么只有在其它黑客称你为黑客时，你才算得上是一名黑客）。常人的印象里，黑客是一项独来独往的工作，所以上述评价方式并不为众人所知。另一个黑客文化误区是拒绝承认自我或外部评价是一个人的动力，这种想法在 1990 年代末以后就逐渐衰退了，但现在还有人这么认为。这也是让上述评价方式鲜为人知的原因之一。&lt;/p&gt;

&lt;p&gt;明确地讲，黑客行为就是人类学家所称的“奉献文化”。在这里你不是凭借你对别人的统治来建立地位和名望，也不是靠美貌，或拥有其他人想要的东西，而是靠你的贡献。尤其是贡献你的时间、你的创造、以及你的技术成果。&lt;/p&gt;

&lt;p&gt;要获得其他黑客的尊敬，你可以从下面五种事情着手：&lt;/p&gt;

&lt;h4 id=&quot;撰写开源软件&quot;&gt;撰写开源软件&lt;/h4&gt;

&lt;p&gt;第一个方法（也是最重要，最传统的方法）是写些被其他黑客认为有趣或有用的程序，并把程序源代码提供给整个黑客文化圈使用。&lt;/p&gt;

&lt;p&gt;（过去我们称之为“free software （自由软件）”， 但这却使很多不知 free 的精确含义的人感到困惑。现在我们很多人，根据搜索引擎网页内容分析，至少三分之二的人在使用”open-source software，即“开源软件”这个词）。&lt;/p&gt;

&lt;p&gt;黑客领域里最受尊敬的偶像，是那些写了大型的、好用的、用途广泛的软件，并把它们发布出来，使得每人都在使用他软件的人。&lt;/p&gt;

&lt;p&gt;但是从历史方面来讲有一点值得一提。虽然黑客们一直认为开源软件的开发者是真正的黑客，但在 1990 年代中期以前，大部分黑客会把自己的主要时间用来撰写闭源软件，直到我 1996 年开始写这篇 HOWTO 时也是如此。但从 1997 年后开源软件进入了主流，而且改变了这一切。以现在的观点来看，“黑客社群”和“开源开发者”是对这一个社群的两种称呼，但值得记住的是，以前这两者的概念并不完全一样。要了解更多信息，你可以看看 关于黑客、开源、以及自由软件的历史这一节的内容。&lt;/p&gt;

&lt;h4 id=&quot;帮助测试并调试开源软件&quot;&gt;帮助测试并调试开源软件&lt;/h4&gt;

&lt;p&gt;黑客也尊敬那些使用和测试开源软件的人。这个世界并不完美，我们不可避免地要把大多数的开发时间放在调试阶段。这就是为什么任何有头脑的开源代码的作者都会告诉你好的 beta 测试员象红宝石一样珍贵。好的测试者知道如何清楚描述出错症状，很好地定位错误，能忍受快速发布中的 bug，并且乐意配合做一些例行的诊断性工作。一个优秀的测试者可以让一场旷日持久辛苦不堪的调试大战变成一场有益身心的小打小闹。&lt;/p&gt;

&lt;p&gt;如果你是个新手，试着找一个你感兴趣的正在开发中的程序，做一个好的 beta 测试员。你会自然地从帮着测试，进步到帮着抓 bug，到最后帮着改程序。你会从中学到很多，而且善因种善果，以后别人也会很乐意帮助你。&lt;/p&gt;

&lt;h4 id=&quot;发布有用的信息&quot;&gt;发布有用的信息&lt;/h4&gt;

&lt;p&gt;另一件好事是收集整理有用有趣的信息，做成网页或类似 FAQ 的文档，并且让大家都能看到。&lt;/p&gt;

&lt;p&gt;技术性 FAQ 的维护者会受到和开源代码的作者一样多的尊敬。&lt;/p&gt;

&lt;h4 id=&quot;帮助维护基础设施的运转&quot;&gt;帮助维护基础设施的运转&lt;/h4&gt;

&lt;p&gt;黑客文化（还有互联网工程方面的发展）是靠志愿者推动的。要使Internet能正常工作，就要有大量枯燥的工作不得不去完成——管理邮件列表和新闻组，维护大型软件库，开发 RFC 和其它技术标准等等。&lt;/p&gt;

&lt;p&gt;做这类事情的人会得到很多尊敬，因为每人都知道这些事情费时颇多，而又不象编程那样有趣。做这些事情需要奉献精神。&lt;/p&gt;

&lt;h4 id=&quot;为黑客文化本身服务&quot;&gt;为黑客文化本身服务&lt;/h4&gt;

&lt;p&gt;最后，你可以为这个文化本身做宣传（例如像我这样，写一个“如何成为黑客”的教程 :-) ）这并不要求在你已经在这个圈子呆了很久，因以上四点中的某点而出名，有一定声誉后才能去做。&lt;/p&gt;

&lt;p&gt;黑客文化没有领袖，这点是确认无疑的。但黑客圈里确实有些文化英雄、部落长者、史学家、还有发言人。如果你在这圈里呆足够长时间，你也许也能成为其中之一。 记住：黑客们不相信他们的部落长者的自夸，因此过分追求这种名誉是危险的。与其奋力追求，不如先摆正自己的位置，等它自己落到你的手中——那时则要做到谦虚和优雅。&lt;/p&gt;

&lt;h3 id=&quot;黑客和书呆子-nerd-的联系&quot;&gt;黑客和书呆子(Nerd)的联系&lt;/h3&gt;

&lt;p&gt;和大家普遍认为的相反，并不是只有书呆子才能成为一名黑客。但它确实有帮助，而且许多黑客事实上是书呆子。做一个深居简出的人有助于你集中精力进行十分重要的事情，如思考和编程。&lt;/p&gt;

&lt;p&gt;因此，很多黑客都接受了“geek（奇客）”这个标签，并把它作为骄傲的奖章——这是宣布他们独立于主流社会期望的一种方式（这个标签也是他们喜欢科幻小说和策略型游戏的标记，而这些也是很多黑客喜欢的东西）。1990 年代更多用的称呼是“nerd（书呆子）”，那时“nerd”只带点轻微的贬义，而“geek”则是地地道道的蔑称，而在 2000 年以后，这两者逐渐调转过来了，至少再美国的大众文化中是这样。而到了现在，甚至在非技术人群里，也有不少以 geek 精神为傲的文化团体。&lt;/p&gt;

&lt;p&gt;如果你能集中足够的精力做好黑客工作同时还能有正常的生活，这是件好事。现在要做到这一点比我在 1970 年代还是新手的时候要容易的多；如今主流文化对技术怪人要友善得多。甚至有越来越多的人意识到黑客通常是很好的恋人和配偶的材料。&lt;/p&gt;

&lt;p&gt;如果你因为生活上不如意而迷上做黑客，那也没什么——至少你不会分神了。也许你以后还能找到自己的生活。&lt;/p&gt;

&lt;h3 id=&quot;向黑客的格调靠拢&quot;&gt;向黑客的格调靠拢&lt;/h3&gt;

&lt;p&gt;重申一下，要做一名黑客，你必须深入体验黑客精神。计算你不在计算机边上，你仍然有很多对黑客工作有帮助的事情可做。它们并不能替代真正的编程（没有什么能替代编程），但很多黑客都那么做，并感到它们与黑客的本质存在某些基本的连系。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;学会用母语流畅地写作。尽管很多人认为程序员写不出好文章，但是有相当数量的黑客（包括所有我知道的最棒的黑客）都是很有能力的写手。&lt;/li&gt;
&lt;li&gt;阅读科幻小说。参加科幻小说讨论会。（这是一个认识黑客和准黑客的好方法）&lt;/li&gt;
&lt;li&gt;学习一种武术。武术中需要的精神自律能力和黑客在这方面的需求非常相似。黑中最受欢迎的武术是来自亚洲的空手格斗类武术，例如跆拳道、空手道、武术、合气道、柔术等。西式击剑和亚洲剑术也有不少的跟随者。1990 年后期以来，在可以合法使用枪支的地方，射击受欢迎的程度也越来越高了。大部分黑客喜欢的武术类型都是那些强调精神的自律，放松的意识，以及意念的控制，而不仅仅是单纯的力量、运动精神、以及身体的强健。&lt;/li&gt;
&lt;li&gt;实实在在学习一种冥想修炼。多年以来黑客中最受欢迎的形式是参禅。（很重要的一点是，参禅和宗教可以说是独立的，你不需要接受一种新宗教，或者放弃现有的宗教信仰，就能做参禅的修炼。其他的形式也许也管用，但注意一定要挑那些靠谱的，不需要你相信不着边际的事物的冥想方式来演练。&lt;/li&gt;
&lt;li&gt;提高自己对双关语和文字游戏的鉴赏能力。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果这些事情有很多你已经在做了，那你可能是天生做黑客的材料。至于为什么偏偏是这些事情，原因并不完全清楚，但它们都涉及用到左－右脑能力的综合，这似乎是关键所在（黑客们既需要清晰的逻辑思维，有时又需要偏离逻辑跳出问题的表象）。&lt;/p&gt;

&lt;p&gt;最后，还有一些不要去做的事情。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;不要使用愚蠢的，哗众取宠的ID或昵称。&lt;/li&gt;
&lt;li&gt;不要卷入 Usenet（或任何其他地方）的骂战。&lt;/li&gt;
&lt;li&gt;不要自称为“cyberpunk（网络朋克）”，也不要浪费时间和那些人打交道。&lt;/li&gt;
&lt;li&gt;不要让你的 email 或者帖子中充满错误的拼写和语法。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上的事情只会为你招来嘲笑。黑客们个个记忆超群——你将需要数年的时间让他们忘记你犯下的错误。&lt;/p&gt;

&lt;p&gt;网名的问题值得深思。将身份隐藏在虚假的名字后是骇客、软件破解者、及其他低等生物幼稚愚蠢的行为。黑客不会做这些事；他们对他们所作的感到骄傲，而且乐于人们将作品与他们的真名相联系。因此, 如果你现在还在使用假名，那就放弃它吧。在黑客文化里假名是失败者的标记。&lt;/p&gt;

&lt;h3 id=&quot;关于黑客、开源、以及自由软件的历史&quot;&gt;关于黑客、开源、以及自由软件的历史&lt;/h3&gt;

&lt;p&gt;1996 年我开始写这篇 HOWTO，那时候的大环境和现在很不一样。这里会给你简单介绍一下相关的历史变迁，这样大致可以澄清一下开源软件、自由软件、以及 Linux 和黑客圈的关系。如果你对这些不感兴趣，你可以直接跳过这一节，继续读下面的 FAQ。&lt;/p&gt;

&lt;p&gt;我在这里所描述黑客精神和社会远远早于1990 Linux 出现的时候，我第一次涉足黑客圈是 1976 年，而究其根源则可追溯到20世纪60年代初。但在 Linux 出现之前，大多数黑客使用的操作系统要么是私有的商业版本，要么是自己开发的未得到广泛使用的系统（例如麻省理工学院的 ITS 系统）。虽然那时也有人想要改变这种状况，但他们的努力影响范围相当有限，充其量仅在某个黑客社区有少数忠实用户而已。&lt;/p&gt;

&lt;p&gt;现在所谓“开源”历史和黑客社区的历史几乎一样长，但直到 1985 年前，它只是一种没有固定称谓的习惯做法，而不是一套有理论做后盾，有宣言做前锋的自觉运动。这种状态在 1985年结束了，长老级黑客 Richard Stallman（也被称为“RMS”）将其命名为“自由软件 (Free Software)”。这种命名也是一种宣言的方式，不过大多数黑客社区都不接收这种包含明显思想烙印的标签。因此而大多数现有的黑客社区从来没有接受。结果，“自由软件”这一标签被黑客社群中声音较大的少数人（尤其是 BSD Unix 的相关人士）拒绝掉了，而剩下的大部分人（包括我）虽然也有保留意见，可也还是沿用了这一称谓。&lt;/p&gt;

&lt;p&gt;尽管很多人存在保留意见，RMS 的“自由软件”的大旗也一直举到了 1990 年代中期。直到 Liunx 崛起时它才受到了重大挑战。Linux 给了的开源开发者一个新的自然归宿，很多项目都已我们现称的开源的方式由 Unix 移植到了 Linux 系统中。Linux 的社区也得到了爆炸性增长，成为了一个比以前黑客文化更为庞大，并且异质化的新的群体。RMS 曾今尝试将这一社群也归并到他的“自由软件运动”大旗下，但终究没有成功，原因可以归于 Linux 社区的样性，以及 Linus Torvalds 本人的质疑。Torvalds 公开拒绝了 RMS 的自由软件思想，但还是沿用了“自由软件”这一术语，这也引来了很多年轻黑客的效仿。&lt;/p&gt;

&lt;p&gt;1996年，当我第一次发表这篇 HOWTO 的时候，黑客社团正在围绕着 Linux 和其它几个开源操作系统（尤其是 BSD Unix 的衍生系统）进行着快速的重组。几十年来围绕着闭源系统进行闭源开发的方式还没有开始淡出集体记忆，但在大家看来，这似乎已经是死去的历史了。越来越多的黑客都已经开始注重自己在开源项目（例如 Linux、Apache 等）上的贡献，并将这些贡献当做自己的成就。&lt;/p&gt;

&lt;p&gt;然而在那个时候“开源”这一名词还没有出现。这个名词是 1998 年初才开始出现的，而在出现的半年内，大部分的黑客社区就接受了这一名词，只有少数不接受这一概念的人还在坚持使用“自由软件”这一名词。1998 年以后，或者更准确地说是 2003 年以后，所谓的“hacking” 和 “开源（自由）软件开发”的含义已经非常接近了。从今天的眼光来看，这种区分已经没有意义了，看趋势，这个现状将来也不大可能有多大的改变。&lt;/p&gt;

&lt;p&gt;不管怎样，这段变更的历史还是值得记住的。&lt;/p&gt;

&lt;h3 id=&quot;其它资源&quot;&gt;其它资源&lt;/h3&gt;

&lt;p&gt;Paul Graham 写了一篇 [&lt;a href=&quot;http://www.paulgraham.com/gh.html&quot;&gt;http://www.paulgraham.com/gh.html&lt;/a&gt; Great Hackers]，还有[&lt;a href=&quot;http://www.paulgraham.com/college.html&quot;&gt;http://www.paulgraham.com/college.html&lt;/a&gt; Undergraduation]一篇，里边有充满智慧的言论。&lt;/p&gt;

&lt;p&gt;还有一篇叫[&lt;a href=&quot;http://samizdat.mines.edu/howto/HowToBeAProgrammer.html&quot;&gt;http://samizdat.mines.edu/howto/HowToBeAProgrammer.html&lt;/a&gt; How To Be A Programmer] 的文章，是这篇文章很好的补充。里边的建议不但包括如何提高编程和其它技术，还包含团队合作的窍门。&lt;/p&gt;

&lt;p&gt;我还写过一篇 [&lt;a href=&quot;http://catb.org/%7Eesr/writings/hacker-history/hacker-history.html&quot;&gt;http://catb.org/~esr/writings/hacker-history/hacker-history.html&lt;/a&gt; A Brief History Of Hackerdom] （译注：黑客文化简史）。&lt;/p&gt;

&lt;p&gt;我写了一本[&lt;a href=&quot;http://catb.org/%7Eesr/writings/cathedral-bazaar/index.html&quot;&gt;http://catb.org/~esr/writings/cathedral-bazaar/index.html&lt;/a&gt; The Cathedral and the Bazaar]（译注：大教堂与市集），对于 Linux 及开放源代码文化现象有详细的解释。这种现象在我的另一篇 [&lt;a href=&quot;http://catb.org/%7Eesr/writings/homesteading/&quot;&gt;http://catb.org/~esr/writings/homesteading/&lt;/a&gt; Homesteading the Noosphere] （译注：开拓智域）中还有更直接的阐述。&lt;/p&gt;

&lt;p&gt;Rick Moen 写了一份很好的关于[&lt;a href=&quot;http://linuxmafia.com/faq/Linux_PR/newlug.html&quot;&gt;http://linuxmafia.com/faq/Linux_PR/newlug.html&lt;/a&gt; how to run a Linux user group]（译注：如何运营Linux 用户组）的文档。&lt;/p&gt;

&lt;p&gt;我和Rick Moen合作完成了另一份关于[&lt;a href=&quot;http://catb.org/%7Eesr/faqs/smart-questions.html&quot;&gt;http://catb.org/~esr/faqs/smart-questions.html&lt;/a&gt; How To Ask Smart Questions]（译注：提问的智慧）的文章，可以让在寻求帮助时得到事半功倍的效果。&lt;/p&gt;

&lt;p&gt;如果你想知道 PC、UNIX 及 Internet 基本概念和工作原理，参考[&lt;a href=&quot;http://en.tldp.org/HOWTO//Unix-and-Internet-Fundamentals-HOWTO/&quot;&gt;http://en.tldp.org/HOWTO//Unix-and-Internet-Fundamentals-HOWTO/&lt;/a&gt; The Unix and Internet Fundamentals HOWTO]。&lt;/p&gt;

&lt;p&gt;当你发布软件或者补丁的时候，请遵照[&lt;a href=&quot;http://en.tldp.org/HOWTO/Software-Release-Practice-HOWTO/index.html&quot;&gt;http://en.tldp.org/HOWTO/Software-Release-Practice-HOWTO/index.html&lt;/a&gt; Software Release Practice HOWTO] 去做。&lt;/p&gt;

&lt;p&gt;如果你对禅诗感兴趣，也许你还喜欢看这篇[&lt;a href=&quot;http://catb.org/%7Eesr//writings/unix-koans&quot;&gt;http://catb.org/~esr//writings/unix-koans&lt;/a&gt; Rootless Root: The Unix Koans of Master Foo]&lt;/p&gt;

&lt;h3 id=&quot;faq（常见问题解答）&quot;&gt;FAQ（常见问题解答）&lt;/h3&gt;

&lt;h4 id=&quot;怎样才能知道自己已经是一名够格的黑客&quot;&gt;怎样才能知道自己已经是一名够格的黑客&lt;/h4&gt;

&lt;p&gt;你可以问自己下面三个问题：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;你能流利地读写代码吗？&lt;/li&gt;
&lt;li&gt;你认同黑客社群的目的和价值吗？&lt;/li&gt;
&lt;li&gt;黑客社群里有没有资深成员称呼你为黑客呢？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果你对这三个问题的答案都是“是”的话，你已经是一名黑客了。如果你只满足其中两项，那就说明你还不够格。&lt;/p&gt;

&lt;p&gt;第一个问题是关于技能的。如果你已经符合本文前面提到的最低需求的话，你也算过关，不过如果你发布过为数不少的开源代码并被社群接受，那你就算满分过关了。&lt;/p&gt;

&lt;p&gt;第二个问题是关于态度的。如果黑客精神的五项基本原则对你来说能有共鸣，而且已经是你处事的方式，你就算过关一半了。这算靠里的一半，靠外的一半和你在黑客社区长期项目上的投入和关联程度有关。&lt;/p&gt;

&lt;p&gt;这里列出了一些项目的不完全列表供你参考：Linux 的改进和用户群扩大对你来说是否重要？你对于自由软件精神是否充满激情？你对于垄断是否有敌意？你是否相信计算机这种工具会让增加世界财富，让这个世界更富有人道主义？&lt;/p&gt;

&lt;p&gt;不过值得注意的一点是，黑客社群有一些特有的政治倾向，其中两条，一条是保卫言论自由权，一种是抵御所谓“知识产权”对于开源社区的侵害。实践这两条的是一些民间组织，例如电子前沿基金会（Electronic Frontier Foundation）就是其中之一。不过虽然如此，黑客们对于有任何明确政治目的的团体都是心怀戒备的，因为我们已经从各种经验教训中学到一点：这些活动只会分裂黑客社团，并让黑客们分心。如果有人以黑客精神为名组织一场首都大游行，那他就完全没有弄明白这点。真正的应对方式也许应该是“闭上嘴巴，给他们看代码”。&lt;/p&gt;

&lt;p&gt;第三个问题有点循环递归的味道。在“什么是黑客”一节我已经讲过，作为一名黑客的意义在于参与某个黑客社群，也就是社交网络的一个亚文化团体，作为内部的贡献成员以及外部的宣传者积极活动。和很久以前相比，黑客群体现在的团结意识和自我意识已经增强了很多。过去三十年来，随着互联网的发展，社交网络逐渐开始发挥举足轻重的作用，而黑客的亚文化团体也更加容易发展和维护了。这种变革的明显一个有代表性的现象是：有的黑客社群现在都有自己专门的文化衫了。&lt;/p&gt;

&lt;p&gt;研究社交网络的社会学家把黑客文化归为“看不见的大学”，而且注意到这些网络社交圈还有所谓的“看门人”——其中的一些核心成员，他们有一定的权威，可以准新成员的进入。所谓的“看不见的大学”本来就是一个松散的非正式组织，所以这些“看门人”也只是这门称呼而已。但不是每个黑客都是“看门人”，这是每个黑客都深刻明白的一点。“看门人”需要有一定的资历和成就，究竟要到什么程度很难讲，但一旦有这样的人出现，每一个黑客都能辨识出来。&lt;/p&gt;

&lt;h4 id=&quot;你能教我做黑客吗&quot;&gt;你能教我做黑客吗&lt;/h4&gt;

&lt;p&gt;自从第一次发布这份文档，我每周都会收到一些请求，（频繁的话一天几封）要我“教会他们做黑客”。遗憾的是，我 没有时间和精力来做这个；我自己的黑客项目，及我作为一个开放源代码倡导者 的四处奔波已经占用了我110%的时间。&lt;/p&gt;

&lt;p&gt;即便我想教你，黑客也依然基本上是一项自行修炼的的态度和技术。 当真正的黑客想帮助你的时候，如果你乞求他们一汤匙一汤匙“喂”你的话，你会发现他们不会尊重你。&lt;/p&gt;

&lt;p&gt;先去学一些东西。显示你在尝试，你能靠自己去学习。然后再去向你遇到的黑客请教特殊的问题。&lt;/p&gt;

&lt;p&gt;如果你发E-mail给一位黑客寻求他的帮助，这是两件首要记住的事情。 第一，写出来的文字显得懒且粗心的人通常非常懒于思考且非常马大哈，不能成为好黑客——因此注意拼写正确，使用正确的语法及发音，否则你可能会无人理睬。 第二，不要试图要求回复到一个ISP帐号，而那个帐号与你 的发信地址不同。这样做的人一般是使用盗用帐号，我们对于回报或者帮助窃贼不感兴趣。&lt;/p&gt;

&lt;h4 id=&quot;那么，我要如何开始&quot;&gt;那么，我要如何开始&lt;/h4&gt;

&lt;p&gt;对你而言最佳的入门方式也许是去参加 LUG（Linux用户组）的聚会。 你可以找到在 LDP 的综合 Linux 信息页面上找到类似的组织；也许有一个在你家附近的，而且非常有可能与一所大学或学校挂钩。如果你提出要求，LUG 成员兴许会给你一套 Linux，当然此后会帮你安装并带你入门。&lt;/p&gt;

&lt;h4 id=&quot;我得什么时候开始学？现在会不会太迟了？&quot;&gt;我得什么时候开始学？现在会不会太迟了？&lt;/h4&gt;

&lt;p&gt;你有动力学习的时候就是好时候。大多数人看来都是在15－20岁之间开始感兴趣的，但据我所知，在此年龄段之外的例外也是有的。&lt;/p&gt;

&lt;h4 id=&quot;要学多久才能学会黑客技能？&quot;&gt;要学多久才能学会黑客技能？&lt;/h4&gt;

&lt;p&gt;这取决于你的聪明程度和努力程度。对于大多数人，只要足够专注，就能在 18 个月到 2 年之间学会一套令人尊敬的技能。但是，不要以为这样就够了；如果你是一个真正的黑客，你要用你的余生来学习和完善你的技术。&lt;/p&gt;

&lt;h4 id=&quot;visual-basic-是好的入门语言吗？&quot;&gt;Visual Basic 是好的入门语言吗？&lt;/h4&gt;

&lt;p&gt;既然你问了这个问题，那你肯定是想在 Microsoft Windows 操作系统下学习黑客技能。这本身就不是一个好主意。我前面讲过在 Windows 下 hack 就跟穿着骑士铠甲跳舞一样，我不是在开玩笑。别走这条路，Windows 是一个很低劣的 hack 环境，而且一直如此。&lt;/p&gt;

&lt;p&gt;Visual Basic 有一个特征性问题，就是它不可以被移植到其他平台。虽然也有些 Visual Basic 开源实现的雏形，但实现的只是 ECMA 标准的一个很小的子集。在 Windows 下大部分类库的知识产权都是 Microsoft 独家所有，如果你不是及其小心的话，你的代码将只能在 Microsoft 支持的平台上使用。如果你不打算从 Unix 起步，那你也有更好的语言可选，而且类库质量还更高，例如 Python 就是其中之一&lt;/p&gt;

&lt;p&gt;和其他的 Basic 类语言一样，Visual Basic 这门编程语言的设计也很糟糕，它会教你一些坏的变成习惯。你就别问我细节了，这可是罄竹难书。还是去学一门设计优良的语言吧。&lt;/p&gt;

&lt;p&gt;其中一个坏习惯是让你依赖于单一厂商的函数库、控件及开发工具。一般而言，任何不能够支持至少 Linux 或者某一种 BSD，或其不能支持至少三种以上操作系统的语言，都是一种不适合应付黑客工作的语言。&lt;/p&gt;

&lt;h4 id=&quot;你能帮我“黑”掉一个站点吗？或者教我怎么黑它？&quot;&gt;你能帮我“黑”掉一个站点吗？或者教我怎么黑它？&lt;/h4&gt;

&lt;p&gt;No。任何读完这份 FAQ 后还问这个问题的人，都是无可救药的蠢材，即使有时间指教我也不会理睬。任何发给我的此类电子邮件都会被忽略或被痛骂一顿。&lt;/p&gt;

&lt;h4 id=&quot;我怎么样才能得到别人帐号的密码？&quot;&gt;我怎么样才能得到别人帐号的密码？&lt;/h4&gt;

&lt;p&gt;这是骇客行为。滚得远远的，白痴。&lt;/p&gt;

&lt;h4 id=&quot;我如何入侵-查看-监视别人的-email？&quot;&gt;我如何入侵/查看/监视别人的 Email？&lt;/h4&gt;

&lt;p&gt;这是骇客行为。在我面前消失，智障。&lt;/p&gt;

&lt;h4 id=&quot;我如何才能在irc聊天室里偷到频道-op-的特权？&quot;&gt;我如何才能在IRC聊天室里偷到频道 op 的特权？&lt;/h4&gt;

&lt;p&gt;这是骇客行为。滚开，笨蛋。&lt;/p&gt;

&lt;h4 id=&quot;我被黑了。你能帮我避免以后再被攻击吗？&quot;&gt;我被黑了。你能帮我避免以后再被攻击吗？&lt;/h4&gt;

&lt;p&gt;不行。目前为止，每次问我这个问题的，都是一些运行 Microsoft Windows 的菜鸟。不可能有效的保护 Windows 系统免受骇客攻击；太多代码和架构的缺陷使保护 Windows 的努力有如隔靴搔痒。唯一可靠的预防来自转移到 Linux 或其他设计得至少足够安全的系统。&lt;/p&gt;

&lt;h4 id=&quot;我的-windows-软件出现问题了。你能帮我吗？&quot;&gt;我的 Windows 软件出现问题了。你能帮我吗？&lt;/h4&gt;

&lt;p&gt;当然。打开 DOS 命令行输入“format c:”。你遇到的任何问题将会在几分钟之内消失。&lt;/p&gt;

&lt;h4 id=&quot;我在哪里能找到可以与之交流的真正的黑客？&quot;&gt;我在哪里能找到可以与之交流的真正的黑客？&lt;/h4&gt;

&lt;p&gt;最佳办法是在你附近找一个Unix或Linux的用户组，参加他们的聚会。（你可以在 ibiblio 的 LDP 站点找到一些用户组的链接。）&lt;/p&gt;

&lt;p&gt;（我过去曾说过不能在IRC上找到真正的黑客，但我发觉现在情况有所改变。显然一些真正的黑客的社区像 GIMP 及 Perl，也有IRC频道了。）
你能推荐一些有关黑客的好书吗？&lt;/p&gt;

&lt;p&gt;我维护着一份[&lt;a href=&quot;http://en.tldp.org/HOWTO/Reading-List-HOWTO/index.html&quot;&gt;http://en.tldp.org/HOWTO/Reading-List-HOWTO/index.html&lt;/a&gt; Linux Reading List HOWTO]，也许你会觉得有用。[&lt;a href=&quot;http://catb.org/%7Eesr/faqs/loginataka.html&quot;&gt;http://catb.org/~esr/faqs/loginataka.html&lt;/a&gt; The Loginataka] 也大致值得一读。&lt;/p&gt;

&lt;p&gt;关于Python的介绍，请访问在Python站点上的[&lt;a href=&quot;http://sebug.net/paper/python/&quot;&gt;http://sebug.net/paper/python/&lt;/a&gt; 入门教程]。&lt;/p&gt;

&lt;h4 id=&quot;成为一名黑客我需要擅长数学吗？&quot;&gt;成为一名黑客我需要擅长数学吗？&lt;/h4&gt;

&lt;p&gt;不用。黑客道很少使用常规的数学或算术，不过你绝对需要能逻辑性地思考和进行精密的推理。尤其是你不会用到微积分或电路分析（我们把这些留给电子工程师们 :-)）。有限数学中的一些可提（包括布尔代数，集合论，组合数学，图论）的背景知识会对你有所帮助。&lt;/p&gt;

&lt;p&gt;更重要的一点：你要有逻辑思维能力，能够以数学家的方式追溯因果。虽然大部分的数学知识对你可能没什么用处，但数学思维的能力对你来说是极其重要的。如果你缺乏这方面的智慧，要做一名黑客恐怕是无望了。如果你缺乏这方面的训练，还是尽早开始吧。&lt;/p&gt;

&lt;h4 id=&quot;我该从那种语言学起&quot;&gt;我该从那种语言学起&lt;/h4&gt;

&lt;p&gt;如果你还没学过XHTML（HTML最新的表现形式）的话，就从它开始吧。市面上有一大堆的封面精美，宣传得天花乱坠的HTML 书籍，不幸的是质量优秀的几近于无。我最喜欢的是[&lt;a href=&quot;http://www.oreilly.com/catalog/html5/&quot;&gt;http://www.oreilly.com/catalog/html5/&lt;/a&gt; HTML: The Definitive Guide]。&lt;/p&gt;

&lt;p&gt;但HTML 不是一种完整的编程语言。当你准备开始编程时，我推荐从[&lt;a href=&quot;http://sebug.net/paper/python/&quot;&gt;http://sebug.net/paper/python/&lt;/a&gt; Python]起步。 你会听到一大群人推荐 Perl，但是 Perl 要难学得多，而且（以我之见）设计得不是很好。&lt;/p&gt;

&lt;p&gt;C 确实重要，但它也比 Python 或 Perl 难多了。不要尝试先学 C。&lt;/p&gt;

&lt;p&gt;Windows用户注意：不要满足于 Visual Basic。它会教给你坏习惯，而且它不可以跨平台移植，只能在Windows下运行。因此还是敬而远之为好。&lt;/p&gt;

&lt;h4 id=&quot;我需要什么样的机器配置&quot;&gt;我需要什么样的机器配置&lt;/h4&gt;

&lt;p&gt;过去个人电脑能力相当不足并且内存很小，这给黑客的学习过程设置了人为的障碍。不过 1990 中期以后就不是这样了；任何一台 Intel 486DX50 以上配置的机器都有足够的能力进行开发工作、运行 X 系统、以及进行 Internet 通讯。而且你买到的市面上最小的硬盘都大得足够你使用了。&lt;/p&gt;

&lt;p&gt;选择用来学习的机器时重要的一点是注意配件是否是Linux兼容的（或BSD兼容，如果你选择 BSD 的话）。和刚才提到的一样，大多数现在的机器都是符合的；唯一值得注意的区域在于 modem 和打印机；有些具备为Windows设计的配件的机器不会在Linux下工作。&lt;/p&gt;

&lt;h4 id=&quot;我想贡献社区。你可以帮我选一个问题让我下手吗？&quot;&gt;我想贡献社区。你可以帮我选一个问题让我下手吗？&lt;/h4&gt;

&lt;p&gt;不行，因为我不知道你的兴趣和擅长领域在哪里。如果你没有内在动力，你就很难坚持下去，所以说，别人只给你的路是行不通的。&lt;/p&gt;

&lt;p&gt;试试这么做吧。在 Freshmeat 网站观察几天，看看里边的项目更新，如果你看到一个看上去很酷而且你也很感兴趣的项目，就加入吧。&lt;/p&gt;

&lt;h4 id=&quot;我得因此憎恨和反对-microsoft-吗&quot;&gt;我得因此憎恨和反对 Microsoft 吗&lt;/h4&gt;

&lt;p&gt;不，你不必如此。不是因为Microsoft不令人讨厌，而是因为黑客文化早在 Microsoft 出现之前就存在了，且将在 Microsoft 成为历史后依然存在。 你耗费在憎恨 Microsoft 的任何力气不如花在爱你的技术上。写好的代码——那会相当有效地打击 Microsoft 又不会让你得到恶报应。&lt;/p&gt;

&lt;h4 id=&quot;开放源代码软件不会使程序员丢饭碗吗&quot;&gt;开放源代码软件不会使程序员丢饭碗吗&lt;/h4&gt;

&lt;p&gt;目前看起来不太可能，开放源代码软件产业似乎创造了更多的就业机会而不是减少就业机会。如果写一个程序比起不写来是纯经济收益的话，那么在写完后，程序员应该得到报酬不管程序是否是开放源代码。并且，无论写出多么“免费自由”的软件，都存在更多对新的，定制的软件的需求。我有这方面更多的论述，放在放源代码网站资料中。&lt;/p&gt;

&lt;h4 id=&quot;我要如何开始？哪里有免费的unix&quot;&gt;我要如何开始？哪里有免费的Unix&lt;/h4&gt;

&lt;p&gt;在本份文档的某个地方我已经提到过何处可以得到最常用的免费 Unix。要做一名黑客，你需要自己找到激励和动力，还要有自学的能力。现在就开始努力吧……&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Eric Steven Raymond
Thyrsus Enterprises
Copyright © 2001 Eric S. Raymond &lt;a href=&quot;mailto:esr@thyrsus.com&quot;&gt;esr@thyrsus.com&lt;/a&gt;
Wang Dingwei &lt;a href=&quot;mailto:wangdingwei82@gmail.com&quot;&gt;wangdingwei82@gmail.com&lt;/a&gt; 基于 Barret 的翻译更正而成。转载请注明出处。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Fri, 24 Jul 2015 03:10:25 +0800</pubDate>
        <link>/2015/07/24/how-to-become-a-hacker/</link>
        <guid isPermaLink="true">/2015/07/24/how-to-become-a-hacker/</guid>
        
        <category>计算机文化</category>
        
        
        <category>计算机文化</category>
        
        <category>搬运</category>
        
      </item>
    
      <item>
        <title>2015年7月书单</title>
        <description>&lt;h3 id=&quot;《三体》&quot;&gt;《三体》&lt;/h3&gt;

&lt;p&gt;二刷，刘大成名作。讲述两个女人毁掉宇宙的故事。书的副名&lt;code&gt;地球往事&lt;/code&gt;，地球君跪了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关键词1：黑暗森林法则&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;《三体II 黑暗森林》中由叶文洁（毁灭宇宙二人组之一）提出：宇宙社会学的核心理论。
宇宙就是一座黑暗森林，每个文明都是带枪的猎人，像幽灵般潜行于林间，轻轻拨开挡路的树枝，竭力不让脚步发出一点儿声音，连呼吸都必须小心翼翼：他必须小心，因为林中到处都有与他一样潜行的猎人，如果他发现了别的生命，能做的只有一件事：开枪消灭之。
在这片森林中，他人就是地狱，就是永恒的威胁，任何暴露自己存在的生命都将很快被消灭，这就是宇宙文明的图景，这就是对费米悖论的解释。&lt;code&gt;被发现，总有一方被消灭！&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;宇宙社会学基本公理：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;生存是文明的第一需要&lt;/li&gt;
&lt;li&gt;文明不断增长和扩张,但宇宙中的物质总量保持不变&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以利用黑暗森林法则，罗辑以暴露坐标（地球和三体星的坐标）为要挟成功对三体文明进行了威慑，致使三体文明不能贸然消灭地球文明，直到死神程心（毁灭宇宙二人组之一）成为执剑人。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“人类共同的物种、相近的文化、同处一个相互依存的生态圈、近在咫尺的距离，在这样的环境下，猜疑链只能延伸一至两层就会被交流所消解。但在太空中，猜疑链则可能延伸得很长，在被交流所消解之前，黑暗战役那样的事已经发生了。……在真正的宇宙文明中，不同种族之间的生物学差异可能达到门甚至界一级，文化上的差异更是不可想象，且相隔着无比遥远的距离，它们之间猜疑链几乎是坚不可摧的。……不管文明在其内部是善意的还是恶意的，在进入猜疑链构成的网络中后都会变成同一种东西。”——刘慈欣《三体2：黑暗森林》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;关键词2：死神&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;死神程心告诉我们：女人的愚蠢加上善良很可怕，分分钟毁宇宙。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关键词3：只送大脑&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一语道破圣母婊的本质。
我相信齐明星已成三体统帅，倒戈了。&lt;/p&gt;

&lt;h3 id=&quot;《http权威指南》&quot;&gt;《Http权威指南》&lt;/h3&gt;

&lt;p&gt;一本讲述http协议的必备工具书。内容不难，可以窥见一套应用协议设计成型过程中的各种妥协和进化历程。&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Jul 2015 20:10:05 +0800</pubDate>
        <link>/2015/07/22/books/</link>
        <guid isPermaLink="true">/2015/07/22/books/</guid>
        
        <category>books</category>
        
        
        <category>booklist</category>
        
      </item>
    
  </channel>
</rss>
